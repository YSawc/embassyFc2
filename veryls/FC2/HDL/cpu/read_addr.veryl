module ReadAddr #(
    param READ_LOCK_COUNT: logic<8> = 1,
) (
    i_clk          : input   logic                ,
    i_mst_clk      : input   logic                ,
    i_rst          : input   logic                ,
    i_en           : input   logic                ,
    i_rx           : input   logic                ,
    i_sequence_en  : input   logic                ,
    i_sequence_addr: input   logic            <16>,
    if_register_slv: modport RegisterIf::Slave    ,
    if_memory_mst  : modport MemoryIf::Master     ,
    if_memory_slv  : modport MemoryIf::Slave      ,
    o_data         : output  logic            <8> ,
    o_busy         : output  logic                ,
    o_rts          : output  logic                ,
    o_finish       : output  logic                ,
) {
    var o_rts_next   : logic    ;
    var o_busy_next  : logic    ;
    var o_finish_next: logic    ;
    var status       : Status   ;
    var status_next  : Status   ;
    enum Status: logic <3> {
        Ready,
        ReadAddrWithRx,
        ReadAddrWithRam,
        Finish,
    }

    let i_addr_read_en    : logic    = status == Status::ReadAddrWithRx;
    var o_addr_data       : logic<8>;
    var o_addr_read_busy  : logic   ;
    var o_addr_read_finish: logic   ;
    inst i_addr_read_rx: uarty::Rx (
        i_clk   : i_mst_clk         ,
        i_rst                       ,
        i_en    : i_addr_read_en    ,
        i_rx                        ,
        o_data  : o_addr_data       ,
        o_busy  : o_addr_read_busy  ,
        o_finish: o_addr_read_finish,
    );

    var o_data_next: logic<8>;
    assign o_rts_next  = if i_addr_read_en {
        ~i_addr_read_en
    } else {
        1
    };

    var wait_c_next            : logic<3> ;
    var wait_c                 : logic<3> ;
    var if_memory_mst_en_next  : logic    ;
    var if_memory_mst_we_next  : logic    ;
    var if_memory_mst_addr_next: logic<16>;
    var latched_io_finish      : logic    ;
    var latched_io_finish_next : logic    ;
    always_comb {
        status_next             = status;
        o_finish_next           = o_finish;
        if_memory_mst_en_next   = if_memory_mst.en;
        if_memory_mst_we_next   = if_memory_mst.we;
        if_memory_mst_addr_next = if_memory_mst.addr;
        o_data_next             = o_data;
        wait_c_next             = wait_c;
        latched_io_finish_next  = latched_io_finish;
        case status {
            Status::Ready: {
                if i_en {
                    if i_sequence_en {
                        if_memory_mst_en_next   = 1;
                        if_memory_mst_addr_next = i_sequence_addr;
                        status_next             = Status::ReadAddrWithRam;
                    } else {
                        status_next = Status::ReadAddrWithRx;
                    }
                }
            }
            Status::ReadAddrWithRx: {
                if i_clk {
                    if latched_io_finish {
                        latched_io_finish_next = 0;
                        o_data_next            = o_addr_data;
                        status_next            = Status::Finish;
                    }
                } else {
                    latched_io_finish_next |= o_addr_read_finish;
                }
            }
            Status::ReadAddrWithRam: {
                if wait_c_next >= READ_LOCK_COUNT {
                    wait_c_next           = 0;
                    if_memory_mst_en_next = 0;
                    o_data_next           = if_memory_slv.data;
                    status_next           = Status::Finish;
                } else {
                    wait_c_next += 1;
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_mst_clk, async_high i_rst) {
        if_reset {
            o_busy             = 0;
            o_finish           = 0;
            status             = Status::Ready;
            o_rts              = 1;
            if_memory_mst.en   = 0;
            if_memory_mst.we   = 0;
            if_memory_mst.addr = 0;
            o_data             = 0;
            wait_c             = 0;
            latched_io_finish  = 0;
        } else {
            o_busy             = o_busy_next;
            o_rts              = o_rts_next;
            if_memory_mst.en   = if_memory_mst_en_next;
            if_memory_mst.we   = if_memory_mst_we_next;
            if_memory_mst.addr = if_memory_mst_addr_next;
            o_data             = o_data_next;
            wait_c             = wait_c_next;
            latched_io_finish  = latched_io_finish_next;
            o_finish           = 0;
            if (i_clk) {
                status   = status_next;
                o_finish = o_finish_next;
            }
        }
    }
}
