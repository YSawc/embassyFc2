module Cpu6502 (
    i_clk : input  logic,
    i_rst : input  logic,
    i_rx  : input  logic, // RX
    i_cts : input  logic, // CTS
    i_resb: input  logic, // RESB
    o_tx  : output logic, // TX
    o_rts : output logic, // RTS
    o_rw  : output logic, // RW
    o_nop : output logic, // Nop(Low if cpumode is not nop)
) {
    inst if_register   : RegisterIf;
    inst if_memory     : MemoryIf;
    assign if_memory.data = o_ram_data;

    var cpu_mode             : ModePkg::CpuMode     ;
    var o_tmp_cpu_mode       : ModePkg::CpuMode     ;
    var cassette_mode        : ModePkg::CassetteMode;
    let i_mode_handler_en    : logic                 = ~o_mode_handler_finish;
    var o_mode_handler_rts   : logic                ;
    var o_mode_handler_busy  : logic                ;
    var o_mode_handler_finish: logic                ;
    inst mode_handler: ModeHandler (
        i_clk                                 ,
        i_rst                                 ,
        i_en           : i_mode_handler_en    ,
        i_rx                                  ,
        o_cpu_mode     : o_tmp_cpu_mode       ,
        o_cassette_mode: cassette_mode        ,
        o_rts          : o_mode_handler_rts   ,
        o_busy         : o_mode_handler_busy  ,
        o_finish       : o_mode_handler_finish,
    );
    assign cpu_mode = if o_debug_finish {
        ModePkg::CpuMode::Nop
    } else {
        o_tmp_cpu_mode
    };

    let i_debug_en            : logic = o_mode_handler_finish && (cpu_mode == ModePkg::CpuMode::DebugWithinMockMemory || cpu_mode == ModePkg::CpuMode::DebugWithinInternalMemory);
    let i_debug_mock_memory_en: logic = cpu_mode == ModePkg::CpuMode::DebugWithinMockMemory;
    let i_debug_tx_en         : logic = ~i_cts;
    var o_debug_busy          : logic;
    var o_debug_tx            : logic;
    var o_debug_rw            : logic;
    var o_debug_finish        : logic;
    inst if_debug_register     : RegisterIf;
    inst if_debug_memory       : MemoryIf;
    var o_debug_rts           : logic;
    inst debug: Debug (
        i_clk                                    ,
        i_rst                                    ,
        i_en                  : i_debug_en       ,
        i_rx                                     ,
        i_we                  : i_debug_tx_en    ,
        i_debug_mock_memory_en                   ,
        if_register_mst       : if_debug_register,
        if_register_slv       : if_register      ,
        if_memory_mst         : if_debug_memory  ,
        if_memory_slv         : if_memory        ,
        o_tx                  : o_debug_tx       ,
        o_busy                : o_debug_busy     ,
        o_rts                 : o_debug_rts      ,
        o_rw                  : o_debug_rw       ,
        o_finish              : o_debug_finish   ,
    );

    var o_ram_data: logic<8>;
    inst ram: Ram (
        i_clk                                ,
        i_rst                                ,
        i_en           : if_debug_memory.en  ,
        i_we           : if_debug_memory.we  ,
        i_addr         : if_debug_memory.addr,
        i_data         : if_debug_memory.data,
        i_cassette_mode: cassette_mode       ,
        o_data         : o_ram_data          ,
    );

    assign o_tx = if (cpu_mode == ModePkg::CpuMode::DebugWithinMockMemory || cpu_mode == ModePkg::CpuMode::DebugWithinInternalMemory) {
        if i_debug_tx_en {
            o_debug_tx
        } else {
            1
        }
    } else {
        1
    };
    assign o_rts = if i_mode_handler_en {
        o_mode_handler_rts
    } else if o_debug_busy {
        o_debug_rts
    } else {
        1
    };
    assign o_rw = if i_debug_en {
        o_debug_rw
    } else {
        1
    };

    assign o_nop = cpu_mode == ModePkg::CpuMode::Nop;
    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            if_register.a  = 0;
            if_register.x  = 0;
            if_register.y  = 0;
            if_register.s  = 8'hFD;
            if_register.p  = 36;
            if_register.pc = 0;
        } else {
            if_register.a  = if_debug_register.a;
            if_register.x  = if_debug_register.x;
            if_register.y  = if_debug_register.y;
            if_register.s  = if_debug_register.s;
            if_register.p  = if_debug_register.p;
            if_register.pc = if_debug_register.pc;
        }
    }
}
