module ModeSelector (
    i_clk   : input  logic              ,
    i_rst   : input  logic              ,
    i_en    : input  logic              ,
    i_mode  : input  logic           <8>,
    o_mode  : output ModePkg::CpuMode   ,
    o_finish: output logic              ,
) {
    enum Status: logic<2> {
        Ready,
        Work,
        Finish,
    }
    var status_next: Status;
    var status     : Status;

    var o_mode_next  : ModePkg::CpuMode;
    var o_finish_next: logic           ;

    always_comb {
        status_next   = status;
        o_finish_next = o_finish;
        o_mode_next   = o_mode;
        case status {
            Status::Ready: {
                if i_en {
                    status_next = Status::Work;
                }
            }
            Status::Work: {
                if i_mode >= 2 && i_mode <= 8'hfe {
                    o_mode_next = i_mode as ModePkg::CpuMode;
                } else {
                    o_mode_next = ModePkg::CpuMode::Nop;
                }
                status_next = Status::Finish;
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            o_mode   = ModePkg::CpuMode::Nop;
            status   = Status::Ready;
            o_finish = 0;
        } else {
            o_mode   = o_mode_next;
            status   = status_next;
            o_finish = o_finish_next;
        }
    }
}
