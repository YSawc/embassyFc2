module OpeCompare (
    i_clk                 : input   logic                    ,
    i_rst                 : input   logic                    ,
    i_en                  : input   logic                    ,
    i_we                  : input   logic                    ,
    i_rx                  : input   logic                    ,
    i_debug_mock_memory_en: input   logic                    ,
    i_ope_kind            : input   OperatorsPkg::OpeKind    ,
    i_addr_mode           : input   OperatorsPkg::AddrMode   ,
    i_target_low_addr     : input   logic                 <8>,
    i_target_high_addr    : input   logic                 <8>,
    if_register_mst       : modport RegisterIf::Master       ,
    if_register_slv       : modport RegisterIf::Slave        ,
    if_memory_mst         : modport MemoryIf::Master         ,
    if_memory_slv         : modport MemoryIf::Slave          ,
    o_tx                  : output  logic                    ,
    o_rts                 : output  logic                    ,
    o_busy                : output  logic                    ,
    o_finish              : output  logic                    ,
) {
    enum Status: logic<2> {
        Ready,
        ReadMemory,
        Compare,
        Finish,
    }
    var status_next      : Status    ;
    var status           : Status    ;
    var o_p_next         : logic <8> ;
    var o_pc_next        : logic <16>;
    var o_busy_next      : logic     ;
    var o_finish_next    : logic     ;
    var compare_data     : logic <8> ;
    var compare_data_next: logic <8> ;

    let i_read_memory_en     : logic    = status == Status::ReadMemory;
    var o_read_memory_data   : logic<8>;
    var o_read_memory_tx     : logic   ;
    var o_read_memory_rts    : logic   ;
    var o_read_memory_busy   : logic   ;
    var o_read_memory_finish : logic   ;
    inst if_read_memory_memory: MemoryIf;
    inst read_memory: ReadMemory (
        i_clk                                        ,
        i_rst                                        ,
        i_en                  : i_read_memory_en     ,
        i_we                                         ,
        i_rx                                         ,
        i_debug_mock_memory_en                       ,
        i_target_low_addr                            ,
        i_target_high_addr                           ,
        if_memory_mst         : if_read_memory_memory,
        if_memory_slv                                ,
        o_data                : o_read_memory_data   ,
        o_tx                  : o_read_memory_tx     ,
        o_rts                 : o_read_memory_rts    ,
        o_busy                : o_read_memory_busy   ,
        o_finish              : o_read_memory_finish ,
    );

    assign o_tx = if status == Status::ReadMemory {
        o_read_memory_tx
    } else {
        1
    };

    assign o_rts = if i_read_memory_en {
        o_read_memory_rts
    } else {
        1
    };

    var if_memory_mst_en_next  : logic    ;
    var if_memory_mst_we_next  : logic    ;
    var if_memory_mst_addr_next: logic<16>;
    var if_memory_mst_data_next: logic<8> ;
    always_comb {
        o_p_next                = if_register_mst.p;
        o_pc_next               = if_register_mst.pc;
        status_next             = status;
        o_finish_next           = o_finish;
        compare_data_next       = compare_data;
        if_memory_mst_en_next   = if_memory_mst.en;
        if_memory_mst_we_next   = if_memory_mst.we;
        if_memory_mst_addr_next = if_memory_mst.addr;
        if_memory_mst_data_next = if_memory_mst.data;
        case status {
            Status::Ready: {
                o_p_next  = if_register_slv.p;
                o_pc_next = if_register_slv.pc;
                if i_en {
                    if i_addr_mode == OperatorsPkg::AddrMode::Imm {
                        compare_data_next = i_target_low_addr;
                        status_next       = Status::Compare;
                    } else {
                        status_next = Status::ReadMemory;
                    }
                }
            }
            Status::ReadMemory: {
                if_memory_mst_en_next   = if_read_memory_memory.en;
                if_memory_mst_we_next   = if_read_memory_memory.we;
                if_memory_mst_addr_next = if_read_memory_memory.addr;
                if_memory_mst_data_next = if_read_memory_memory.data;
                if o_read_memory_finish {
                    compare_data_next = o_read_memory_data;
                    status_next       = Status::Compare;
                }
            }
            Status::Compare: {
                if i_ope_kind == OperatorsPkg::OpeKind::Cmp {
                    RegisterPkg::compare_with_nzc(o_p_next, if_register_slv.a, compare_data);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Cpx {
                    RegisterPkg::compare_with_nzc(o_p_next, if_register_slv.x, compare_data);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Cpy {
                    RegisterPkg::compare_with_nzc(o_p_next, if_register_slv.y, compare_data);
                }
                status_next = Status::Finish;
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            compare_data       = 0;
            if_register_mst.p  = 36;
            if_register_mst.pc = 0;
            if_memory_mst.en   = 0;
            if_memory_mst.we   = 0;
            if_memory_mst.addr = 0;
            if_memory_mst.data = 0;
            status             = Status::Ready;
            o_busy             = 0;
            o_finish           = 0;
        } else {
            compare_data       = compare_data_next;
            if_register_mst.p  = o_p_next;
            if_register_mst.pc = o_pc_next;
            if_memory_mst.en   = if_memory_mst_en_next;
            if_memory_mst.we   = if_memory_mst_we_next;
            if_memory_mst.addr = if_memory_mst_addr_next;
            if_memory_mst.data = if_memory_mst_data_next;
            status             = status_next;
            o_busy             = o_busy_next;
            o_finish           = o_finish_next;
        }
    }
}
