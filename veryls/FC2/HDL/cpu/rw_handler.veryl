module RWHandler (
    i_clk     : input  logic                ,
    i_rst     : input  logic                ,
    i_en      : input  logic                ,
    i_ope_kind: input  OperatorsPkg::OpeKind,
    o_rw      : output logic                ,
    o_busy    : output logic                ,
    o_finish  : output logic                ,
) {
    enum Status: logic<2> {
        Idle,
        Work,
        Finish,
    }
    var status       : Status;
    var status_next  : Status;
    var o_rw_next    : logic ;
    var o_busy_next  : logic ;
    var o_finish_next: logic ;
    always_comb {
        status_next   = status;
        o_finish_next = o_finish;
        o_busy_next   = o_busy;
        o_rw_next     = o_rw;
        case status {
            Status::Idle: {
                if i_en {
                    o_busy_next = 1;
                    status_next = Status::Work;
                }
            }
            Status::Work: {
                status_next = Status::Finish;
                o_busy_next = 0;
                if i_ope_kind == OperatorsPkg::OpeKind::Dec || i_ope_kind == OperatorsPkg::OpeKind::Inc || i_ope_kind == OperatorsPkg::OpeKind::Sta || i_ope_kind == OperatorsPkg::OpeKind::Stx || i_ope_kind == OperatorsPkg::OpeKind::Sty || i_ope_kind == OperatorsPkg::OpeKind::Php || i_ope_kind == OperatorsPkg::OpeKind::Dcp {
                    o_rw_next = 0;
                } else {
                    o_rw_next = 1;
                }
            }
            Status::Finish: {
                status_next = Status::Idle;
            }

        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            status   = Status::Idle;
            o_finish = 0;
            o_busy   = 0;
            o_rw     = 0;
        } else {
            status   = status_next;
            o_finish = o_finish_next;
            o_busy   = o_busy_next;
            o_rw     = o_rw_next;
        }
    }

}
