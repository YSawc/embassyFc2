module OpeOther (
    i_clk          : input   logic                   ,
    i_rst          : input   logic                   ,
    i_en           : input   logic                   ,
    i_ope_kind     : input   OperatorsPkg::OpeKind   ,
    i_addr_low     : input   logic                <8>,
    i_addr_high    : input   logic                <8>,
    if_register_slv: modport RegisterIf::Slave       ,
    if_register_mst: modport RegisterIf::Master      ,
    o_busy         : output  logic                   ,
    o_finish       : output  logic                   ,
) {
    enum Status: logic<2> {
        Idle,
        Work,
        Finish,
    }
    var status       : Status    ;
    var status_next  : Status    ;
    var a_next       : logic <8> ;
    var x_next       : logic <8> ;
    var y_next       : logic <8> ;
    var s_next       : logic <8> ;
    var p_next       : logic <8> ;
    var pc_next      : logic <16>;
    var o_busy_next  : logic     ;
    var o_finish_next: logic     ;

    always_comb {
        status_next   = status;
        o_finish_next = o_finish;
        o_busy_next   = o_busy;
        a_next        = if_register_mst.a;
        x_next        = if_register_mst.x;
        y_next        = if_register_mst.y;
        s_next        = if_register_mst.s;
        p_next        = if_register_mst.p;
        pc_next       = if_register_mst.pc;
        case status {
            Status::Idle: {
                if i_en {
                    a_next      = if_register_slv.a;
                    x_next      = if_register_slv.x;
                    y_next      = if_register_slv.y;
                    s_next      = if_register_slv.s;
                    p_next      = if_register_slv.p;
                    pc_next     = if_register_slv.pc;
                    o_busy_next = 1;
                    status_next = Status::Work;
                }
            }
            Status::Work: {
                status_next = Status::Finish;
                o_busy_next = 0;
                if i_ope_kind == OperatorsPkg::OpeKind::Inx {
                    x_next = RegisterPkg::add_with_vnz(p_next, x_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Dex {
                    x_next = RegisterPkg::sub_with_nz(p_next, x_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Iny {
                    y_next = RegisterPkg::add_with_vnz(p_next, y_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Dey {
                    y_next = RegisterPkg::sub_with_nz(p_next, y_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Clc {
                    RegisterPkg::set_c(p_next, 0);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Sec {
                    RegisterPkg::set_c(p_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Cli {
                    RegisterPkg::set_i(p_next, 0);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Sei {
                    RegisterPkg::set_i(p_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Cld {
                    RegisterPkg::set_d(p_next, 0);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Sed {
                    RegisterPkg::set_d(p_next, 1);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Clv {
                    RegisterPkg::set_v(p_next, 0);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Jmp {
                    pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bpl {
                    if (if_register_slv.p & 8'b10000000) == 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bmi {
                    if (if_register_slv.p & 8'b10000000) != 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bvc {
                    if (if_register_slv.p & 8'b01000000) == 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bvs {
                    if (if_register_slv.p & 8'b01000000) != 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bcc {
                    if (if_register_slv.p & 8'b00000001) == 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bcs {
                    if (if_register_slv.p & 8'b00000001) != 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bne {
                    if (if_register_slv.p & 8'b00000010) == 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Beq {
                    if (if_register_slv.p & 8'b00000010) != 0 {
                        pc_next = utilPkg::combine_byte_to_short(i_addr_high, i_addr_low);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Tax {
                    x_next              = if_register_slv.a;
                    RegisterPkg::set_nz(p_next, x_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Txa {
                    a_next              = if_register_slv.x;
                    RegisterPkg::set_nz(p_next, a_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Tay {
                    y_next              = if_register_slv.a;
                    RegisterPkg::set_nz(p_next, y_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Tya {
                    a_next              = if_register_slv.y;
                    RegisterPkg::set_nz(p_next, a_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Tsx {
                    x_next              = if_register_slv.s;
                    RegisterPkg::set_nz(p_next, x_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Txs {
                    s_next = if_register_slv.x;
                }
            }
            Status::Finish: {
                status_next = Status::Idle;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            status             = Status::Idle;
            o_finish           = 0;
            o_busy             = 0;
            if_register_mst.a  = 0;
            if_register_mst.x  = 0;
            if_register_mst.y  = 0;
            if_register_mst.s  = 8'hFD;
            if_register_mst.p  = 36;
            if_register_mst.pc = 0;
        } else {
            status             = status_next;
            o_finish           = o_finish_next;
            o_busy             = o_busy_next;
            if_register_mst.a  = a_next;
            if_register_mst.x  = x_next;
            if_register_mst.y  = y_next;
            if_register_mst.s  = s_next;
            if_register_mst.p  = p_next;
            if_register_mst.pc = pc_next;
        }
    }
}
