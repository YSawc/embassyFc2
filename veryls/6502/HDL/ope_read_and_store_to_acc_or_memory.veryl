module OpeReadAndStoreToAccOrMemory (
    i_clk                 : input   logic                    ,
    i_rst                 : input   logic                    ,
    i_en                  : input   logic                    ,
    i_we                  : input   logic                    ,
    i_rx                  : input   logic                    ,
    i_debug_mock_memory_en: input   logic                    ,
    i_addr_mode           : input   OperatorsPkg::AddrMode   ,
    i_ope_kind            : input   OperatorsPkg::OpeKind    ,
    i_target_low_addr     : input   logic                 <8>,
    i_target_high_addr    : input   logic                 <8>,
    if_register_mst       : modport RegisterIf::Master       ,
    if_register_slv       : modport RegisterIf::Slave        ,
    if_memory_mst         : modport MemoryIf::Master         ,
    if_memory_slv         : modport MemoryIf::Slave          ,
    o_tx                  : output  logic                    ,
    o_rts                 : output  logic                    ,
    o_busy                : output  logic                    ,
    o_finish              : output  logic                    ,
) {
    enum Status: logic<3> {
        Ready,
        ReadMemory,
        PreWrite,
        WriteAcc,
        WriteMemory,
        Finish,
    }
    var status_next  : Status   ;
    var status       : Status   ;
    var is_carry_next: logic    ;
    var is_carry     : logic    ;
    var a_next       : logic <8>;
    var p_next       : logic <8>;
    var o_busy_next  : logic    ;
    var o_finish_next: logic    ;

    let i_read_memory_en     : logic    = status == Status::ReadMemory;
    var o_read_memory_data   : logic<8>;
    var o_read_memory_tx     : logic   ;
    var o_read_memory_rts    : logic   ;
    var o_read_memory_busy   : logic   ;
    var o_read_memory_finish : logic   ;
    inst if_read_memory_memory: MemoryIf;
    inst read_memory: ReadMemory (
        i_clk                                        ,
        i_rst                                        ,
        i_en                  : i_read_memory_en     ,
        i_we                                         ,
        i_rx                                         ,
        i_debug_mock_memory_en                       ,
        i_target_low_addr                            ,
        i_target_high_addr                           ,
        if_memory_mst         : if_read_memory_memory,
        if_memory_slv                                ,
        o_data                : o_read_memory_data   ,
        o_tx                  : o_read_memory_tx     ,
        o_rts                 : o_read_memory_rts    ,
        o_busy                : o_read_memory_busy   ,
        o_finish              : o_read_memory_finish ,
    );
    var i_assign_data     : logic<8>;
    var i_assign_data_next: logic<8>;
    let i_memory_tx_en    : logic    = i_en && status == Status::WriteMemory;
    var i_memory_tx_tx    : logic   ;
    var o_memory_tx_busy  : logic   ;
    var o_memory_tx_finish: logic   ;
    inst memory_tx: uarty::Tx (
        i_clk                       ,
        i_rst                       ,
        i_en    : i_memory_tx_en    ,
        i_data  : i_assign_data     ,
        o_tx    : i_memory_tx_tx    ,
        o_busy  : o_memory_tx_busy  ,
        o_finish: o_memory_tx_finish,
    );

    assign o_tx = if status == Status::ReadMemory {
        o_read_memory_tx
    } else if status == Status::WriteMemory {
        i_memory_tx_tx
    } else {
        1
    };

    var if_memory_mst_en_next  : logic    ;
    var if_memory_mst_we_next  : logic    ;
    var if_memory_mst_addr_next: logic<16>;
    var if_memory_mst_data_next: logic<8> ;
    always_comb {
        a_next                  = if_register_mst.a;
        p_next                  = if_register_mst.p;
        status_next             = status;
        o_finish_next           = o_finish;
        i_assign_data_next      = i_assign_data;
        is_carry_next           = is_carry;
        if_memory_mst_en_next   = if_memory_mst.en;
        if_memory_mst_we_next   = if_memory_mst.we;
        if_memory_mst_addr_next = if_memory_mst.addr;
        if_memory_mst_data_next = if_memory_mst.data;
        case status {
            Status::Ready: {
                if i_en {
                    a_next = if_register_slv.a;
                    p_next = if_register_slv.p;
                    if i_addr_mode == OperatorsPkg::AddrMode::Acc {
                        i_assign_data_next = a_next;
                        status_next        = Status::PreWrite;
                    } else {
                        status_next = Status::ReadMemory;
                    }
                }
            }
            Status::ReadMemory: {
                if_memory_mst_en_next   = if_read_memory_memory.en;
                if_memory_mst_we_next   = if_read_memory_memory.we;
                if_memory_mst_addr_next = if_read_memory_memory.addr;
                if_memory_mst_data_next = if_read_memory_memory.data;
                if o_read_memory_finish {
                    i_assign_data_next = o_read_memory_data;
                    status_next        = Status::PreWrite;
                }
            }
            Status::PreWrite: {
                if i_ope_kind == OperatorsPkg::OpeKind::Asl || i_ope_kind == OperatorsPkg::OpeKind::Rol {
                    is_carry_next      =   (i_assign_data & 8'b10000000) != 0;
                    i_assign_data_next <<= 1;
                    if i_ope_kind == OperatorsPkg::OpeKind::Rol && (if_register_mst.p & 8'b00000001) == 1 {
                        i_assign_data_next |= 8'b00000001;
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Lsr || i_ope_kind == OperatorsPkg::OpeKind::Ror {
                    is_carry_next      =   (i_assign_data & 8'b00000001) != 0;
                    i_assign_data_next >>= 1;
                    if i_ope_kind == OperatorsPkg::OpeKind::Ror && (if_register_mst.p & 8'b00000001) == 1 {
                        i_assign_data_next |= 8'b10000000;
                    }
                }
                if i_addr_mode == OperatorsPkg::AddrMode::Acc {
                    status_next = Status::WriteAcc;
                } else {
                    status_next = Status::WriteMemory;
                }
            }
            Status::WriteAcc: {
                a_next              = i_assign_data;
                RegisterPkg::set_c (p_next, is_carry);
                RegisterPkg::set_nz(p_next, i_assign_data);
                status_next         = Status::Finish;
            }
            Status::WriteMemory: {
                if o_memory_tx_finish {
                    RegisterPkg::set_c (p_next, is_carry);
                    RegisterPkg::set_nz(p_next, i_assign_data);
                    status_next         = Status::Finish;
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            if_register_mst.a  = 0;
            if_register_mst.p  = 36;
            status             = Status::Ready;
            i_assign_data      = 0;
            is_carry           = 0;
            o_busy             = 0;
            o_finish           = 0;
            if_memory_mst.en   = 0;
            if_memory_mst.we   = 0;
            if_memory_mst.addr = 0;
            if_memory_mst.data = 0;
        } else {
            if_register_mst.a  = a_next;
            if_register_mst.p  = p_next;
            status             = status_next;
            i_assign_data      = i_assign_data_next;
            is_carry           = is_carry_next;
            o_busy             = o_busy_next;
            o_finish           = o_finish_next;
            if_memory_mst.en   = if_memory_mst_en_next;
            if_memory_mst.we   = if_memory_mst_we_next;
            if_memory_mst.addr = if_memory_mst_addr_next;
            if_memory_mst.data = if_memory_mst_data_next;
        }
    }
}
