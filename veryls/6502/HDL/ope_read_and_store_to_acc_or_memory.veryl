module OpeReadAndStoreToAccOrMemory (
    CLK             : input   logic                    ,
    RST             : input   logic                    ,
    EN              : input   logic                    ,
    WE              : input   logic                    ,
    DATA_IN         : input   logic                    ,
    addr_mode       : input   OperatorsPkg::AddrMode   ,
    ope_kind        : input   OperatorsPkg::OpeKind    ,
    target_low_addr : input   logic                 <8>,
    target_high_addr: input   logic                 <8>,
    register_slv    : modport RegisterIf::Slave        ,
    register_mst    : modport RegisterIf::Master       ,
    tx_data_out     : output  logic                    ,
    RTS             : output  logic                    ,
    busy            : output  logic                    ,
    finish          : output  logic                    ,
) {
    enum Status: logic<3> {
        Ready,
        ReadMemory,
        PreWrite,
        WriteAcc,
        WriteMemory,
        Finish,
    }
    var n_status  : Status   ;
    var status    : Status   ;
    var n_is_carry: logic    ;
    var is_carry  : logic    ;
    var n_a       : logic <8>;
    var n_p       : logic <8>;
    var n_busy    : logic    ;
    var n_finish  : logic    ;

    var read_memory_en         : logic    = status == Status::ReadMemory;
    var read_memory_target_data: logic<8>;
    var read_memory_tx_data_out: logic   ;
    var read_memory_rts        : logic   ;
    var read_memory_busy       : logic   ;
    var read_memory_finish     : logic   ;
    inst read_memory: ReadMemory (
        CLK                                      ,
        RST                                      ,
        EN              : read_memory_en         ,
        WE                                       ,
        DATA_IN                                  ,
        target_low_addr                          ,
        target_high_addr                         ,
        target_data     : read_memory_target_data,
        tx_data_out     : read_memory_tx_data_out,
        RTS             : read_memory_rts        ,
        busy            : read_memory_busy       ,
        finish          : read_memory_finish     ,
    );

    var assign_data       : logic<8>;
    var n_assign_data     : logic<8>;
    var memory_tx_en      : logic    = WE && status == Status::WriteMemory;
    var memory_tx_data_out: logic   ;
    var memory_tx_busy    : logic   ;
    var memory_tx_finish  : logic   ;
    inst memory_tx: uarty::Tx (
        CLK                         ,
        RST                         ,
        WE      : memory_tx_en      ,
        DATA_IN : assign_data       ,
        data_out: memory_tx_data_out,
        busy    : memory_tx_busy    ,
        finish  : memory_tx_finish  ,
    );

    assign tx_data_out = if status == Status::ReadMemory {
        read_memory_tx_data_out
    } else if status == Status::WriteMemory {
        memory_tx_data_out
    } else {
        1
    };

    always_comb {
        n_a           = register_mst.a;
        n_p           = register_mst.p;
        n_status      = status;
        n_finish      = finish;
        n_assign_data = assign_data;
        n_is_carry    = is_carry;
        case status {
            Status::Ready: {
                if EN {
                    n_a = register_slv.a;
                    n_p = register_slv.p;
                    if addr_mode == OperatorsPkg::AddrMode::Acc {
                        n_assign_data = n_a;
                        n_status      = Status::PreWrite;
                    } else {
                        n_status = Status::ReadMemory;
                    }
                }
            }
            Status::ReadMemory: {
                if read_memory_finish {
                    n_assign_data = read_memory_target_data;
                    n_status      = Status::PreWrite;
                }
            }
            Status::PreWrite: {
                if ope_kind == OperatorsPkg::OpeKind::Asl || ope_kind == OperatorsPkg::OpeKind::Rol {
                    n_is_carry    =   (assign_data & 8'b10000000) != 0;
                    n_assign_data <<= 1;
                    if ope_kind == OperatorsPkg::OpeKind::Rol && (register_mst.p & 8'b00000001) == 1 {
                        n_assign_data |= 8'b00000001;
                    }
                } else if ope_kind == OperatorsPkg::OpeKind::Lsr || ope_kind == OperatorsPkg::OpeKind::Ror {
                    n_is_carry    =   (assign_data & 8'b00000001) != 0;
                    n_assign_data >>= 1;
                    if ope_kind == OperatorsPkg::OpeKind::Ror && (register_mst.p & 8'b00000001) == 1 {
                        n_assign_data |= 8'b10000000;
                    }
                }
                if addr_mode == OperatorsPkg::AddrMode::Acc {
                    n_status = Status::WriteAcc;
                } else {
                    n_status = Status::WriteMemory;
                }
            }
            Status::WriteAcc: {
                n_a                 = assign_data;
                RegisterPkg::set_c (n_p, is_carry);
                RegisterPkg::set_nz(n_p, assign_data);
                n_status            = Status::Finish;
            }
            Status::WriteMemory: {
                if memory_tx_finish {
                    RegisterPkg::set_c (n_p, is_carry);
                    RegisterPkg::set_nz(n_p, assign_data);
                    n_status            = Status::Finish;
                }
            }
            Status::Finish: {
                n_status = Status::Ready;
            }
        }
        n_finish = n_status == Status::Finish;
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            register_mst.a = 0;
            register_mst.p = 0;
            status         = Status::Ready;
            assign_data    = 0;
            is_carry       = 0;
            busy           = 0;
            finish         = 0;
        } else {
            register_mst.a = n_a;
            register_mst.p = n_p;
            status         = n_status;
            assign_data    = n_assign_data;
            is_carry       = n_is_carry;
            busy           = n_busy;
            finish         = n_finish;
        }
    }
}
