module Ram (
    i_clk : input  logic    ,
    i_rst : input  logic    ,
    i_en  : input  logic    ,
    i_we  : input  logic    ,
    i_addr: input  logic<16>,
    i_data: input  logic<8> ,
    o_data: output logic<8> ,
) {
    var i_ip_wram_we  : logic   ;
    var o_ip_wram_data: logic<8>;
    inst ip_wram: $sv::ip_wram (
        address: i_addr        ,
        clock  : i_clk         ,
        data   : i_data        ,
        wren   : i_ip_wram_we  ,
        q      : o_ip_wram_data,
    );

    var i_ip_wram_mirror_we  : logic   ;
    var o_ip_wram_mirror_data: logic<8>;
    inst ip_wram_mirror: $sv::ip_wram_mirror (
        address: i_addr               ,
        clock  : i_clk                ,
        data   : i_data               ,
        wren   : i_ip_wram_mirror_we  ,
        q      : o_ip_wram_mirror_data,
    );

    var i_ip_ppu_reg_mirror_en  : logic   ;
    var o_ip_ppu_reg_mirror_data: logic<8>;
    inst ip_ppu_reg_mirror: $sv::ip_ppu_reg_mirror (
        address: i_addr                  ,
        clock  : i_clk                   ,
        data   : i_data                  ,
        wren   : i_ip_ppu_reg_mirror_en  ,
        q      : o_ip_ppu_reg_mirror_data,
    );

    var i_ip_func_apu_io_we  : logic   ;
    var o_ip_func_apu_io_data: logic<8>;
    inst ip_func_apu_io: $sv::ip_func_apu_io (
        address: i_addr               ,
        clock  : i_clk                ,
        data   : i_data               ,
        wren   : i_we                 ,
        q      : o_ip_func_apu_io_data,
    );

    var i_ip_erom_we  : logic   ;
    var o_ip_erom_data: logic<8>;
    inst ip_erom: $sv::ip_erom (
        address: i_addr        ,
        clock  : i_clk         ,
        data   : i_data        ,
        wren   : i_ip_erom_we  ,
        q      : o_ip_erom_data,
    );

    var i_ip_eram_we  : logic   ;
    var o_ip_eram_data: logic<8>;
    inst ip_eram: $sv::ip_eram (
        address: i_addr        ,
        clock  : i_clk         ,
        data   : i_data        ,
        wren   : i_ip_eram_we  ,
        q      : o_ip_eram_data,
    );

    var i_ip_prg1_rom_we  : logic   ;
    var o_ip_prg1_rom_data: logic<8>;
    inst ip_prg1_rom: $sv::ip_eram (
        address: i_addr            ,
        clock  : i_clk             ,
        data   : i_data            ,
        wren   : i_ip_prg1_rom_we  ,
        q      : o_ip_prg1_rom_data,
    );

    var i_ip_prg2_rom_we  : logic   ;
    var o_ip_prg2_rom_data: logic<8>;
    inst ip_prg2_rom: $sv::ip_eram (
        address: i_addr            ,
        clock  : i_clk             ,
        data   : i_data            ,
        wren   : i_ip_prg2_rom_we  ,
        q      : o_ip_prg2_rom_data,
    );

    var n_o_data: logic<8>;
    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            n_o_data               = 0;
            o_data                 = 0;
            i_ip_wram_we           = 0;
            i_ip_wram_mirror_we    = 0;
            i_ip_ppu_reg_mirror_en = 0;
            i_ip_func_apu_io_we    = 0;
            i_ip_erom_we           = 0;
            i_ip_eram_we           = 0;
            i_ip_prg1_rom_we       = 0;
            i_ip_prg2_rom_we       = 0;
        } else {
            o_data                 = n_o_data;
            i_ip_wram_we           = 0;
            i_ip_wram_mirror_we    = 0;
            i_ip_ppu_reg_mirror_en = 0;
            i_ip_func_apu_io_we    = 0;
            i_ip_erom_we           = 0;
            i_ip_eram_we           = 0;
            i_ip_prg1_rom_we       = 0;
            i_ip_prg2_rom_we       = 0;

            if i_en {
                if i_we {
                    if i_addr >= 16'h0000 && i_addr <= 16'h07FF {
                        i_ip_wram_we = 1;
                    } else if i_addr >= 16'h0800 && i_addr <= 16'h1FFF {
                        i_ip_wram_mirror_we = 1;
                    } else if i_addr >= 16'h2000 && i_addr <= 16'h2007 {
                        // TODO: implement
                    } else if i_addr >= 16'h2008 && i_addr <= 16'h3FFF {
                        i_ip_ppu_reg_mirror_en = 1;
                    } else if i_addr >= 16'h4000 && i_addr <= 16'h4017 {
                        // TODO: implement
                    } else if i_addr >= 16'h4018 && i_addr <= 16'h401F {
                        i_ip_func_apu_io_we = 1;
                    } else if i_addr >= 16'h4020 && i_addr <= 16'h5FFF {
                        i_ip_erom_we = 1;
                    } else if i_addr >= 16'h6000 && i_addr <= 16'h7FFF {
                        i_ip_eram_we = 1;
                    } else if i_addr >= 16'h8000 && i_addr <= 16'hBFFF {
                        i_ip_prg1_rom_we = 1;
                    } else if i_addr >= 16'hCFFF && i_addr <= 16'hFFFF {
                        i_ip_prg2_rom_we = 1;
                    }
                } else {
                    if i_addr >= 16'h0000 && i_addr <= 16'h07FF {
                        n_o_data = o_ip_wram_data;
                    } else if i_addr >= 16'h0800 && i_addr <= 16'h1FFF {
                        n_o_data = o_ip_wram_mirror_data;
                    } else if i_addr >= 16'h2000 && i_addr <= 16'h2007 {
                        // TODO: implement
                    } else if i_addr >= 16'h2008 && i_addr <= 16'h3FFF {
                        n_o_data = o_ip_ppu_reg_mirror_data;
                    } else if i_addr >= 16'h4000 && i_addr <= 16'h4017 {
                        // TODO: implement
                    } else if i_addr >= 16'h4018 && i_addr <= 16'h401F {
                        n_o_data = o_ip_func_apu_io_data;
                    } else if i_addr >= 16'h4020 && i_addr <= 16'h5FFF {
                        n_o_data = o_ip_erom_data;
                    } else if i_addr >= 16'h6000 && i_addr <= 16'h7FFF {
                        n_o_data = o_ip_eram_data;
                    } else if i_addr >= 16'h8000 && i_addr <= 16'hBFFF {
                        n_o_data = o_ip_prg1_rom_data;
                    } else if i_addr >= 16'hCFFF && i_addr <= 16'hFFFF {
                        n_o_data = o_ip_prg2_rom_data;
                    }
                }
            }
        }
    }
}
