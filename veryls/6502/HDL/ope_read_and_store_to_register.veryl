module OpeReadAndStoreToRegister (
    i_clk                 : input   logic                    ,
    i_rst                 : input   logic                    ,
    i_en                  : input   logic                    ,
    i_we                  : input   logic                    ,
    i_rx                  : input   logic                    ,
    i_debug_mock_memory_en: input   logic                    ,
    i_ope_kind            : input   OperatorsPkg::OpeKind    ,
    i_addr_mode           : input   OperatorsPkg::AddrMode   ,
    i_target_low_addr     : input   logic                 <8>,
    i_target_high_addr    : input   logic                 <8>,
    if_register_slv       : modport RegisterIf::Slave        ,
    if_register_mst       : modport RegisterIf::Master       ,
    if_memory_mst         : modport MemoryIf::Master         ,
    if_memory_slv         : modport MemoryIf::Slave          ,
    o_tx                  : output  logic                    ,
    o_rts                 : output  logic                    ,
    o_busy                : output  logic                    ,
    o_finish              : output  logic                    ,
) {
    enum Status: logic<2> {
        Ready,
        ReadMemory,
        WriteRegister,
        Finish,
    }
    var status_next              : Status    ;
    var status                   : Status    ;
    var o_a_next                 : logic <8> ;
    var o_x_next                 : logic <8> ;
    var o_y_next                 : logic <8> ;
    var o_s_next                 : logic <8> ;
    var o_p_next                 : logic <8> ;
    var o_pc_next                : logic <16>;
    var o_busy_next              : logic     ;
    var o_finish_next            : logic     ;
    var register_data_next       : logic <8> ;
    var register_data            : logic <8> ;
    var tmp_target_low_addr      : logic <8> ;
    var tmp_target_low_addr_next : logic <8> ;
    var tmp_target_high_addr     : logic <8> ;
    var tmp_target_high_addr_next: logic <8> ;
    var write_count              : logic <2> ;
    var write_count_next         : logic <2> ;
    var pc_low_tmp               : logic <8> ;
    var o_pc_low_tmp_next        : logic <8> ;
    var pc_high_tmp              : logic <8> ;
    var o_pc_high_tmp_next       : logic <8> ;
    var p_tmp                    : logic <8> ;
    var o_p_tmp_next             : logic <8> ;

    let i_read_memory_en     : logic    = status == Status::ReadMemory;
    var o_read_memory_data   : logic<8>;
    var o_read_memory_tx     : logic   ;
    var o_read_memory_rts    : logic   ;
    var o_read_memory_busy   : logic   ;
    var o_read_memory_finish : logic   ;
    inst if_read_memory_memory: MemoryIf;
    inst read_memory: ReadMemory (
        i_clk                                        ,
        i_rst                                        ,
        i_en                  : i_read_memory_en     ,
        i_we                                         ,
        i_rx                                         ,
        i_debug_mock_memory_en                       ,
        i_target_low_addr     : tmp_target_low_addr  ,
        i_target_high_addr    : tmp_target_high_addr ,
        if_memory_mst         : if_read_memory_memory,
        if_memory_slv                                ,
        o_data                : o_read_memory_data   ,
        o_tx                  : o_read_memory_tx     ,
        o_rts                 : o_read_memory_rts    ,
        o_busy                : o_read_memory_busy   ,
        o_finish              : o_read_memory_finish ,
    );

    assign o_tx = if status == Status::ReadMemory {
        o_read_memory_tx
    } else {
        1
    };

    assign o_rts = if status == Status::ReadMemory {
        o_read_memory_rts
    } else {
        1
    };

    var if_memory_mst_en_next  : logic    ;
    var if_memory_mst_we_next  : logic    ;
    var if_memory_mst_addr_next: logic<16>;
    var if_memory_mst_data_next: logic<8> ;
    always_comb {
        status_next               = status;
        o_finish_next             = o_finish;
        o_a_next                  = if_register_mst.a;
        o_x_next                  = if_register_mst.x;
        o_y_next                  = if_register_mst.y;
        o_s_next                  = if_register_mst.s;
        o_p_next                  = if_register_mst.p;
        o_pc_next                 = if_register_mst.pc;
        register_data_next        = register_data;
        tmp_target_low_addr_next  = tmp_target_low_addr;
        tmp_target_high_addr_next = tmp_target_high_addr;
        write_count_next          = write_count;
        o_pc_low_tmp_next         = pc_low_tmp;
        o_pc_high_tmp_next        = pc_high_tmp;
        o_p_tmp_next              = p_tmp;
        if_memory_mst_en_next     = if_memory_mst.en;
        if_memory_mst_we_next     = if_memory_mst.we;
        if_memory_mst_addr_next   = if_memory_mst.addr;
        if_memory_mst_data_next   = if_memory_mst.data;
        case status {
            Status::Ready: {
                if i_en {
                    if write_count == 0 {
                        o_a_next           = if_register_slv.a;
                        o_x_next           = if_register_slv.x;
                        o_y_next           = if_register_slv.y;
                        o_s_next           = if_register_slv.s;
                        o_p_next           = if_register_slv.p;
                        o_pc_next          = if_register_slv.pc;
                        o_pc_low_tmp_next  = 0;
                        o_pc_high_tmp_next = 0;
                        o_p_tmp_next       = 0;
                        write_count_next   = 0;
                    }

                    if i_ope_kind == OperatorsPkg::OpeKind::Rti || i_ope_kind == OperatorsPkg::OpeKind::Rts {
                        o_s_next                  = utilPkg::wrapping_add(o_s_next, 1);
                        tmp_target_low_addr_next  = o_s_next;
                        tmp_target_high_addr_next = 1;
                        status_next               = Status::ReadMemory;
                    } else {
                        if i_addr_mode == OperatorsPkg::AddrMode::Imm {
                            register_data_next = i_target_low_addr;
                            status_next        = Status::WriteRegister;
                        } else {
                            if i_ope_kind == OperatorsPkg::OpeKind::Plp || i_ope_kind == OperatorsPkg::OpeKind::Pla {
                                tmp_target_low_addr_next  = o_s_next;
                                tmp_target_high_addr_next = 1;
                                o_s_next                  = RegisterPkg::add_without_flag(o_p_next, o_s_next, 1);
                            } else {
                                tmp_target_low_addr_next  = i_target_low_addr;
                                tmp_target_high_addr_next = i_target_high_addr;
                            }

                            status_next = Status::ReadMemory;
                        }
                    }
                }
            }
            Status::ReadMemory: {
                if_memory_mst_en_next   = if_read_memory_memory.en;
                if_memory_mst_we_next   = if_read_memory_memory.we;
                if_memory_mst_addr_next = if_read_memory_memory.addr;
                if_memory_mst_data_next = if_read_memory_memory.data;
                if o_read_memory_finish {
                    register_data_next = o_read_memory_data;
                    status_next        = Status::WriteRegister;
                }
            }
            Status::WriteRegister: {
                status_next = Status::Finish;
                if i_ope_kind == OperatorsPkg::OpeKind::Rti {
                    if write_count == 0 {
                        write_count_next += 1;
                        o_p_tmp_next     =  register_data;
                        status_next      =  Status::Ready;
                    } else if write_count == 1 {
                        write_count_next  += 1;
                        o_pc_low_tmp_next =  register_data;
                        status_next       =  Status::Ready;
                    } else {
                        write_count_next   = 0;
                        o_pc_high_tmp_next = register_data;
                        o_pc_next          = utilPkg::combine_byte_to_short(o_pc_high_tmp_next, o_pc_low_tmp_next);
                        o_p_next           = o_p_tmp_next;
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Rts {
                    if write_count == 0 {
                        write_count_next  += 1;
                        o_pc_low_tmp_next =  register_data;
                        status_next       =  Status::Ready;
                    } else {
                        o_pc_high_tmp_next = register_data;
                        o_pc_next          = utilPkg::combine_byte_to_short(o_pc_high_tmp_next, o_pc_low_tmp_next);
                        o_pc_next          = utilPkg::short_wrapping_add(o_pc_next, 1);
                    }
                } else if i_ope_kind == OperatorsPkg::OpeKind::Adc {
                    o_a_next = RegisterPkg::add_with_vnzc_and_adding_carry(o_p_next, o_a_next, register_data);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Sbc {
                    o_a_next = RegisterPkg::sub_with_vnzc_and_adding_neg_carry(o_p_next, o_a_next, register_data);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Ora {
                    o_a_next            |= register_data;
                    RegisterPkg::set_nz(o_p_next, o_a_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::And {
                    o_a_next            &= register_data;
                    RegisterPkg::set_nz(o_p_next, o_a_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Eor {
                    o_a_next            ^= register_data;
                    RegisterPkg::set_nz(o_p_next, o_a_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Bit {
                    RegisterPkg::set_z(o_p_next, (register_data & o_a_next) == 0);
                    RegisterPkg::set_n(o_p_next, (register_data & 8'b10000000) != 0);
                    RegisterPkg::set_v(o_p_next, (register_data & 8'b01000000) != 0);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Lda || i_ope_kind == OperatorsPkg::OpeKind::Pla {
                    o_a_next            = register_data;
                    RegisterPkg::set_nz(o_p_next, o_a_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Ldx {
                    o_x_next            = register_data;
                    RegisterPkg::set_nz(o_p_next, o_x_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Ldy {
                    o_y_next            = register_data;
                    RegisterPkg::set_nz(o_p_next, o_y_next);
                } else if i_ope_kind == OperatorsPkg::OpeKind::Plp {
                    o_p_next = register_data;
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            register_data        = 0;
            if_register_mst.a    = 0;
            if_register_mst.x    = 0;
            if_register_mst.y    = 0;
            if_register_mst.s    = 0;
            if_register_mst.p    = 0;
            if_register_mst.pc   = 0;
            status               = Status::Ready;
            o_busy               = 0;
            o_finish             = 0;
            tmp_target_low_addr  = 0;
            tmp_target_high_addr = 0;
            write_count          = 0;
            pc_low_tmp           = 0;
            pc_high_tmp          = 0;
            p_tmp                = 0;
            if_memory_mst.en     = 0;
            if_memory_mst.we     = 0;
            if_memory_mst.addr   = 0;
            if_memory_mst.data   = 0;
        } else {
            register_data        = register_data_next;
            if_register_mst.a    = o_a_next;
            if_register_mst.x    = o_x_next;
            if_register_mst.y    = o_y_next;
            if_register_mst.s    = o_s_next;
            if_register_mst.p    = o_p_next;
            if_register_mst.pc   = o_pc_next;
            status               = status_next;
            o_busy               = o_busy_next;
            o_finish             = o_finish_next;
            tmp_target_low_addr  = tmp_target_low_addr_next;
            tmp_target_high_addr = tmp_target_high_addr_next;
            write_count          = write_count_next;
            pc_low_tmp           = o_pc_low_tmp_next;
            pc_high_tmp          = o_pc_high_tmp_next;
            p_tmp                = o_p_tmp_next;
            if_memory_mst.en     = if_memory_mst_en_next;
            if_memory_mst.we     = if_memory_mst_we_next;
            if_memory_mst.addr   = if_memory_mst_addr_next;
            if_memory_mst.data   = if_memory_mst_data_next;
        }
    }
}
