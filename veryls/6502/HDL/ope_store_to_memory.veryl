module OpeStoreToMemory (
    i_clk                 : input   logic                   ,
    i_rst                 : input   logic                   ,
    i_en                  : input   logic                   ,
    i_we                  : input   logic                   ,
    i_rx                  : input   logic                   ,
    i_debug_mock_memory_en: input   logic                   ,
    i_ope_kind            : input   OperatorsPkg::OpeKind   ,
    i_target_low_addr     : input   logic                <8>,
    i_target_high_addr    : input   logic                <8>,
    if_register_mst       : modport RegisterIf::Master      ,
    if_register_slv       : modport RegisterIf::Slave       ,
    if_memory_mst         : modport MemoryIf::Master        ,
    if_memory_slv         : modport MemoryIf::Slave         ,
    o_tx                  : output  logic                   ,
    o_busy                : output  logic                   ,
    o_finish              : output  logic                   ,
) {
    enum Status: logic<2> {
        Ready,
        WriteMemory,
        Finish,
    }
    var status_next              : Status    ;
    var status                   : Status    ;
    var o_tx_next                : logic     ;
    var o_busy_next              : logic     ;
    var o_finish_next            : logic     ;
    var tmp_target_low_addr      : logic <8> ;
    var tmp_target_high_addr     : logic <8> ;
    var tmp_target_low_addr_next : logic <8> ;
    var tmp_target_high_addr_next: logic <8> ;
    var s_next                   : logic <8> ;
    var p_next                   : logic <8> ;
    var pc_next                  : logic <16>;
    var i_send_data_next         : logic <8> ;
    var i_send_data              : logic <8> ;
    var write_count              : logic <2> ;
    var write_count_next         : logic <2> ;

    let i_write_memory_en     : logic = status == Status::WriteMemory;
    var o_write_memory_tx     : logic;
    var o_write_memory_busy   : logic;
    var o_write_memory_finish : logic;
    inst if_write_memory_memory: MemoryIf;
    inst write_memory: WriteMemory (
        i_clk                                         ,
        i_rst                                         ,
        i_en                  : i_write_memory_en     ,
        i_we                                          ,
        i_rx                                          ,
        i_debug_mock_memory_en                        ,
        i_target_low_addr     : tmp_target_low_addr   ,
        i_target_high_addr    : tmp_target_high_addr  ,
        i_send_data                                   ,
        if_memory_mst         : if_write_memory_memory,
        if_memory_slv                                 ,
        o_tx                  : o_write_memory_tx     ,
        o_busy                : o_write_memory_busy   ,
        o_finish              : o_write_memory_finish ,
    );
    var if_memory_mst_en_next  : logic    ;
    var if_memory_mst_we_next  : logic    ;
    var if_memory_mst_addr_next: logic<16>;
    var if_memory_mst_data_next: logic<8> ;
    always_comb {
        o_tx_next                 = o_tx;
        status_next               = status;
        o_finish_next             = o_finish;
        tmp_target_low_addr_next  = tmp_target_low_addr;
        tmp_target_high_addr_next = tmp_target_high_addr;
        s_next                    = if_register_mst.s;
        p_next                    = if_register_mst.p;
        pc_next                   = if_register_mst.pc;
        i_send_data_next          = i_send_data;
        write_count_next          = write_count;
        if_memory_mst_en_next     = if_memory_mst.en;
        if_memory_mst_we_next     = if_memory_mst.we;
        if_memory_mst_addr_next   = if_memory_mst.addr;
        if_memory_mst_data_next   = if_memory_mst.data;
        case status {
            Status::Ready: {
                if i_en {
                    if write_count == 0 {
                        s_next           = if_register_slv.s;
                        p_next           = if_register_slv.p;
                        pc_next          = if_register_slv.pc;
                        write_count_next = 0;
                    }

                    if i_ope_kind == OperatorsPkg::OpeKind::Jsr {
                        tmp_target_low_addr_next  = s_next;
                        tmp_target_high_addr_next = 1;
                        s_next                    = utilPkg::wrapping_sub(s_next, 1);
                        if write_count == 0 {
                            i_send_data_next = ((pc_next - 1) & 16'hFF00) >> 8;
                        } else {
                            i_send_data_next = (pc_next - 1) & 16'h00FF;
                        }
                    } else if i_ope_kind == OperatorsPkg::OpeKind::Pha || i_ope_kind == OperatorsPkg::OpeKind::Php {
                        s_next                    = RegisterPkg::sub_without_flag(p_next, s_next, 1);
                        tmp_target_low_addr_next  = s_next;
                        tmp_target_high_addr_next = 1;
                    } else {
                        tmp_target_low_addr_next  = i_target_low_addr;
                        tmp_target_high_addr_next = i_target_high_addr;
                    }

                    if i_ope_kind != OperatorsPkg::OpeKind::Jsr {
                        i_send_data_next = if i_ope_kind == OperatorsPkg::OpeKind::Sta || i_ope_kind == OperatorsPkg::OpeKind::Pha {
                            if_register_slv.a
                        } else if i_ope_kind == OperatorsPkg::OpeKind::Stx {
                            if_register_slv.x
                        } else if i_ope_kind == OperatorsPkg::OpeKind::Sty {
                            if_register_slv.y
                        } else if i_ope_kind == OperatorsPkg::OpeKind::Php {
                            if_register_slv.p
                        } else {
                            0
                        };
                    }
                    status_next = Status::WriteMemory;
                }
            }
            Status::WriteMemory: {
                o_tx_next               = o_write_memory_tx;
                if_memory_mst_en_next   = if_write_memory_memory.en;
                if_memory_mst_we_next   = if_write_memory_memory.we;
                if_memory_mst_addr_next = if_write_memory_memory.addr;
                if_memory_mst_data_next = if_write_memory_memory.data;
                if o_write_memory_finish {
                    if i_ope_kind == OperatorsPkg::OpeKind::Jsr {
                        if write_count == 0 {
                            write_count_next += 1;
                            status_next      =  Status::Ready;
                        } else {
                            write_count_next = 0;
                            pc_next          = utilPkg::combine_byte_to_short(i_target_high_addr, i_target_low_addr);
                            status_next      = Status::Finish;
                        }
                    } else {
                        status_next = Status::Finish;
                    }
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            o_tx                 = 0;
            o_busy               = 0;
            status               = Status::Ready;
            o_finish             = 0;
            tmp_target_low_addr  = 0;
            tmp_target_high_addr = 0;
            if_register_mst.s    = 8'hFD;
            if_register_mst.p    = 36;
            if_register_mst.pc   = 0;
            i_send_data          = 0;
            write_count          = 0;
            if_memory_mst.en     = 0;
            if_memory_mst.we     = 0;
            if_memory_mst.addr   = 0;
            if_memory_mst.data   = 0;
        } else {
            o_tx                 = o_tx_next;
            o_busy               = o_busy_next;
            status               = status_next;
            o_finish             = o_finish_next;
            tmp_target_low_addr  = tmp_target_low_addr_next;
            tmp_target_high_addr = tmp_target_high_addr_next;
            if_register_mst.s    = s_next;
            if_register_mst.p    = p_next;
            if_register_mst.pc   = pc_next;
            i_send_data          = i_send_data_next;
            write_count          = write_count_next;
            if_memory_mst.en     = if_memory_mst_en_next;
            if_memory_mst.we     = if_memory_mst_we_next;
            if_memory_mst.addr   = if_memory_mst_addr_next;
            if_memory_mst.data   = if_memory_mst_data_next;
        }
    }
}
