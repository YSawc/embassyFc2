module ModeHandler (
    i_clk   : input  logic           ,
    i_rst   : input  logic           ,
    i_en    : input  logic           ,
    i_rx    : input  logic           ,
    o_mode  : output ModePkg::CpuMode,
    o_rts   : output logic           ,
    o_busy  : output logic           ,
    o_finish: output logic           ,
) {
    let i_mode_read_en    : logic    = (o_mode == ModePkg::CpuMode::nop);
    var o_mode_read_data  : logic<8>;
    var o_mode_read_busy  : logic   ;
    var o_mode_read_finish: logic   ;
    inst mode_read_rx: uarty::Rx (
        i_clk                       ,
        i_rst                       ,
        i_en    : i_mode_read_en    ,
        i_rx                        ,
        o_data  : o_mode_read_data  ,
        o_busy  : o_mode_read_busy  ,
        o_finish: o_mode_read_finish,
    );

    assign o_rts = if i_mode_read_en {
        ~i_mode_read_en
    } else {
        1
    };

    let mode_selector_en      : logic = o_mode_read_data != 0;
    var o_mode_selector_finish: logic;
    inst mode_selector: ModeSelector (
        i_clk                           ,
        i_rst                           ,
        i_en    : mode_selector_en      ,
        i_data  : o_mode_read_data      ,
        o_mode                          ,
        o_finish: o_mode_selector_finish,
    );

    assign o_busy   = ~o_mode_selector_finish;
    assign o_finish = o_mode_selector_finish;
}
