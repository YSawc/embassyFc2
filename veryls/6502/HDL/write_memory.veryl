module WriteMemory (
    CLK             : input  logic   ,
    RST             : input  logic   ,
    EN              : input  logic   ,
    WE              : input  logic   ,
    DATA_IN         : input  logic   ,
    target_low_addr : input  logic<8>,
    target_high_addr: input  logic<8>,
    send_data       : input  logic<8>,
    tx_data_out     : output logic   ,
    busy            : output logic   ,
    finish          : output logic   ,
) {
    var n_busy  : logic    ;
    var n_finish: logic    ;
    var status  : Status   ;
    var n_status: Status   ;
    enum Status: logic <3> {
        Ready,
        LowTx,
        HighTx,
        MemoryTx,
        Finish,
    }
    var n_tx_data_out: logic;

    var low_tx_en      : logic    = WE && status == Status::LowTx;
    var low_tx_data_in : logic<8> = target_low_addr;
    var low_tx_data_out: logic   ;
    var low_tx_busy    : logic   ;
    var low_tx_finish  : logic   ;
    inst low_tx: uarty::Tx (
        CLK                      ,
        RST                      ,
        WE      : low_tx_en      ,
        DATA_IN : low_tx_data_in ,
        data_out: low_tx_data_out,
        busy    : low_tx_busy    ,
        finish  : low_tx_finish  ,
    );

    var high_tx_en      : logic    = WE && status == Status::HighTx;
    var high_tx_data_in : logic<8> = target_high_addr;
    var high_tx_data_out: logic   ;
    var high_tx_busy    : logic   ;
    var high_tx_finish  : logic   ;
    inst high_tx: uarty::Tx (
        CLK                       ,
        RST                       ,
        WE      : high_tx_en      ,
        DATA_IN : high_tx_data_in ,
        data_out: high_tx_data_out,
        busy    : high_tx_busy    ,
        finish  : high_tx_finish  ,
    );

    var memory_tx_en      : logic    = status == Status::MemoryTx;
    var memory_tx_data_out: logic<8>;
    var memory_tx_busy    : logic   ;
    var memory_tx_finish  : logic   ;
    inst memory_tx: uarty::Tx (
        CLK                         ,
        RST                         ,
        WE      : memory_tx_en      ,
        DATA_IN : send_data         ,
        data_out: memory_tx_data_out,
        busy    : memory_tx_busy    ,
        finish  : memory_tx_finish  ,
    );

    always_comb {
        n_status      = status;
        n_finish      = finish;
        n_tx_data_out = tx_data_out;
        case status {
            Status::Ready: {
                n_finish      = 0;
                n_tx_data_out = 1;
                if EN {
                    n_status = Status::LowTx;
                }
            }
            Status::LowTx: {
                n_tx_data_out = low_tx_data_out;
                if low_tx_finish {
                    n_status = Status::HighTx;
                }
            }
            Status::HighTx: {
                n_tx_data_out = high_tx_data_out;
                if high_tx_finish {
                    n_status = Status::MemoryTx;
                }
            }
            Status::MemoryTx: {
                n_tx_data_out = memory_tx_data_out;
                if memory_tx_finish {
                    n_status = Status::Finish;
                }
            }
            Status::Finish: {
                n_finish = 1;
                n_status = Status::Ready;
            }
        }
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            busy        = 0;
            finish      = 0;
            status      = Status::Ready;
            tx_data_out = 0;
        } else {
            busy        = n_busy;
            finish      = n_finish;
            status      = n_status;
            tx_data_out = n_tx_data_out;
        }
    }
}
