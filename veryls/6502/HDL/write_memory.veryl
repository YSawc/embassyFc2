module WriteMemory (
    i_clk             : input  logic   ,
    i_rst             : input  logic   ,
    i_en              : input  logic   ,
    i_we              : input  logic   ,
    i_rx              : input  logic   ,
    i_target_low_addr : input  logic<8>,
    i_target_high_addr: input  logic<8>,
    i_send_data       : input  logic<8>,
    o_tx              : output logic   ,
    o_busy            : output logic   ,
    o_finish          : output logic   ,
) {
    var o_busy_next  : logic    ;
    var o_finish_next: logic    ;
    var status       : Status   ;
    var status_next  : Status   ;
    enum Status: logic <3> {
        Ready,
        LowTx,
        HighTx,
        MemoryTx,
        Finish,
    }
    var o_tx_next: logic;

    let i_low_tx_en    : logic    = i_we && status == Status::LowTx;
    let i_low_tx_data  : logic<8> = i_target_low_addr;
    var o_low_tx_tx    : logic   ;
    var o_low_tx_busy  : logic   ;
    var o_low_tx_finish: logic   ;
    inst low_tx: uarty::Tx (
        i_clk                    ,
        i_rst                    ,
        i_en    : i_low_tx_en    ,
        i_data  : i_low_tx_data  ,
        o_tx    : o_low_tx_tx    ,
        o_busy  : o_low_tx_busy  ,
        o_finish: o_low_tx_finish,
    );

    let i_high_tx_en    : logic    = i_we && status == Status::HighTx;
    let i_high_tx_data  : logic<8> = i_target_high_addr;
    var o_high_tx_tx    : logic   ;
    var o_high_tx_busy  : logic   ;
    var o_high_tx_finish: logic   ;
    inst high_tx: uarty::Tx (
        i_clk                     ,
        i_rst                     ,
        i_en    : i_high_tx_en    ,
        i_data  : i_high_tx_data  ,
        o_tx    : o_high_tx_tx    ,
        o_busy  : o_high_tx_busy  ,
        o_finish: o_high_tx_finish,
    );

    let i_memory_tx_en    : logic    = status == Status::MemoryTx;
    var o_memory_tx_tx    : logic<8>;
    var o_memory_tx_busy  : logic   ;
    var o_memory_tx_finish: logic   ;
    inst memory_tx: uarty::Tx (
        i_clk                       ,
        i_rst                       ,
        i_en    : i_memory_tx_en    ,
        i_data  : i_send_data       ,
        o_tx    : o_memory_tx_tx    ,
        o_busy  : o_memory_tx_busy  ,
        o_finish: o_memory_tx_finish,
    );

    always_comb {
        status_next   = status;
        o_finish_next = o_finish;
        o_tx_next     = o_tx;
        case status {
            Status::Ready: {
                o_tx_next = 1;
                if i_en {
                    status_next = Status::LowTx;
                }
            }
            Status::LowTx: {
                o_tx_next = o_low_tx_tx;
                if o_low_tx_finish {
                    status_next = Status::HighTx;
                }
            }
            Status::HighTx: {
                o_tx_next = o_high_tx_tx;
                if o_high_tx_finish {
                    status_next = Status::MemoryTx;
                }
            }
            Status::MemoryTx: {
                o_tx_next = o_memory_tx_tx;
                if o_memory_tx_finish {
                    status_next = Status::Finish;
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            o_busy   = 0;
            o_finish = 0;
            status   = Status::Ready;
            o_tx     = 0;
        } else {
            o_busy   = o_busy_next;
            o_finish = o_finish_next;
            status   = status_next;
            o_tx     = o_tx_next;
        }
    }
}
