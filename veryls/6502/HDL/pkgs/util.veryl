package utilPkg {
    function wrapping_add (
        l: input logic<8>,
        r: input logic<8>,
    ) -> logic<8> {
        let int_buffer : logic<16> = l + r;
        let is_overflow: logic     = int_buffer >= 16'h100;
        if is_overflow {
            return (l + r - 16'h100);
        } else {
            return (l + r);
        }
    }

    function short_wrapping_add (
        l: input logic<16>,
        r: input logic<8> ,
    ) -> logic<16> {
        let int_buffer : logic<17> = l + r;
        let is_overflow: logic     = int_buffer >= 17'h10000;
        if is_overflow {
            return (l + r - 17'h10000);
        } else {
            return (l + r);
        }
    }

    function wrapping_sub (
        l: input logic<8>,
        r: input logic<8>,
    ) -> logic<8> {
        if l <: r {
            return (16'h100 - r + l);
        } else {
            return (l - r);
        }
    }
}
