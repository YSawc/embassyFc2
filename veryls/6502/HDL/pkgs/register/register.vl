package RegisterPkg {
    struct Register {
        a : logic  <7>,
        x : logic  <7>,
        y : logic  <7>,
        s : logic  <7>,
        p : PPkg::P   ,
        pc: logic  <7>,
    }
    var register: Register;

    function init() -> void {
        register.a = 0;
        register.x = 0;
        register.y = 0;
        register.s = 8'hff;
        PPkg::init();
        register.p = 0;
    }

    enum Status: logic<3> {
        idle,
        working,
    }

    function set_a (
        data: input logic<7>,
    ) -> void {
        register.a = data;
    }

    function get_a () -> logic<7> {
        return register.a;
    }

    function set_x (
        data: input logic<7>,
    ) -> void {
        register.x = data;
    }

    function get_x () -> logic<7> {
        return register.a;
    }

    function set_y (
        data: input logic<7>,
    ) -> void {
        register.y = data;
    }

    function get_y () -> logic<7> {
        return register.y;
    }

    function set_s (
        data: input logic<7>,
    ) -> void {
        register.s = data;
    }

    function get_s () -> logic<7> {
        return register.s;
    }

    function set_pc (
        data: input logic<7>,
    ) -> void {
        register.pc = data;
    }

    function get_pc () -> logic<7> {
        return register.pc;
    }

    function inc_pc (
        data: input logic<15>,
    ) -> void {
        register.pc += data;
    }

    function dec_pc (
        data: input logic<15>,
    ) -> void {
        register.pc -= data;
    }
}
