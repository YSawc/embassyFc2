package RegisterPkg {
    struct Register {
        a : logic  <7>,
        x : logic  <7>,
        y : logic  <7>,
        s : logic  <7>,
        p : PPkg::P   ,
        pc: logic  <7>,
    }

    function set_c (
        current_p: ref   logic<8>,
        flag     : input logic   ,
    ) {
        current_p = if flag {
            current_p | 8'b00000001
        } else {
            current_p & 8'b11111110
        };
    }

    function set_z (
        current_p: ref   logic<8>,
        flag     : input logic   ,
    ) {
        current_p = if flag {
            current_p | 8'b00000010
        } else {
            current_p & 8'b11111101
        };
    }

    function set_i (
        current_p: ref   logic<8>,
        flag     : input logic   ,
    ) {
        current_p = if flag {
            current_p | 8'b00000100
        } else {
            current_p & 8'b11111011
        };
    }

    function set_d (
        current_p: ref   logic<8>,
        flag     : input logic   ,
    ) {
        current_p = if flag {
            current_p | 8'b00001000
        } else {
            current_p & 8'b11110111
        };
    }

    function add_with_vnzc_and_adding_carry (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        let old_carry: logic = (current_p & 8'b00000001) != 0;
        let is_carry : logic = (input_l + input_r + old_carry) >= 16'h100;
        set_c    (current_p, is_carry);
        return base_add_with_vnz(1, 1, current_p, input_l, input_r + old_carry);
    }

    function add_with_vnz (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        return base_add_with_vnz(1, 1, current_p, input_l, input_r);
    }

    function add_with_nz (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        return base_add_with_vnz(0, 1, current_p, input_l, input_r);
    }

    function add_without_flag (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        return base_add_with_vnz(0, 0, current_p, input_l, input_r);
    }

    function base_add_with_vnz (
        handle_overflow: input logic   ,
        handle_nz      : input logic   ,
        current_p      : ref   logic<8>,
        input_l        : input logic<8>,
        input_r        : input logic<8>,
    ) -> logic<8> {
        let is_l_data_plus: logic     = (input_l & 8'b10000000) == 0;
        let is_r_data_plus: logic     = (input_r & 8'b10000000) == 0;
        let byte_buf      : logic<16> = input_l + input_r;
        let is_carry      : logic     = byte_buf >= 16'h100;
        let output_data   : logic<8>  = if is_carry {
            input_l + input_r - 16'h100
        } else {
            input_l + input_r
        };
        let is_data_plus: logic = (output_data & 8'b10000000) == 0;
        var is_overflow : logic;
        if handle_overflow {
            is_overflow = (is_data_plus != is_l_data_plus) && (is_data_plus != is_r_data_plus);
            set_v      (current_p, is_overflow);
        }
        if handle_nz {
            set_nz(current_p, output_data);
        }
        return output_data;
    }

    function sub_with_vnzc_and_adding_neg_carry (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        let old_carry: logic = (current_p & 8'b00000001) != 0;
        let is_carry : logic = !((input_l - input_r - !old_carry) >= 16'h100);
        set_c    (current_p, is_carry);
        return base_sub_with_vnz(1, 1, current_p, input_l, input_r + !old_carry);
    }

    function sub_with_vnz (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        return base_sub_with_vnz(1, 1, current_p, input_l, input_r);
    }

    function sub_with_nz (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        return base_sub_with_vnz(0, 1, current_p, input_l, input_r);
    }

    function sub_without_flag (
        current_p: ref   logic<8>,
        input_l  : input logic<8>,
        input_r  : input logic<8>,
    ) -> logic<8> {
        return base_sub_with_vnz(0, 0, current_p, input_l, input_r);
    }

    function base_sub_with_vnz (
        handle_overflow: input logic   ,
        handle_nz      : input logic   ,
        current_p      : ref   logic<8>,
        input_l        : input logic<8>,
        input_r        : input logic<8>,
    ) -> logic<8> {
        let is_l_data_minus: logic     = (input_l & 8'b10000000) != 0;
        let byte_buf       : logic<16> = input_l - input_r;
        let is_carry       : logic     = !(byte_buf <: 16'h100);
        let is_data_plus   : logic     = (output_data & 8'b10000000) == 0;
        let output_data    : logic<8>  = if is_carry {
            input_l - input_r + 16'h100
        } else {
            input_l - input_r
        };
        let is_overflow: logic = (output_data & 8'b10000000) == 0;
        if handle_overflow {
            is_overflow = is_data_plus && is_l_data_minus;
            set_v      (current_p, is_overflow);
        }
        if handle_nz {
            set_nz(current_p, output_data);
        }
        return output_data;
    }

    function add_three_with_adding_carry (
        current_p: ref   logic<8>,
        input_1  : ref   logic<8>,
        input_2  : ref   logic<8>,
        input_3  : input logic<8>,
    ) {
        let old_carry: logic     = (current_p & 8'b00000001) != 0;
        let byte_buf : logic<16> = input_2 + input_3 + old_carry;
        input_2   = utilPkg::wrapping_add(input_2, input_3 + old_carry);
        if byte_buf >= 16'h100 {
            set_c  (current_p, 1);
            input_1 = utilPkg::wrapping_add(input_1, 1);
        } else {
            set_c(current_p, 0);
        }
    }

    function rel (
        pc     : input logic<16>,
        input_1: ref   logic<8> ,
        input_2: ref   logic<8> ,
        input_3: input logic<8> ,
    ) {
        input_1                        = (pc & 16'hFF00) >> 8;
        input_2                        = pc & 16'h000FF;
        add_three_without_adding_carry(input_1, input_2, 1);
        let byte_buf                      : logic<16> = (input_1 << 8) + input_2 + input_3;
        if (input_3 >= 8'h80) {
            byte_buf -= 16'h100;
        }
        input_1 = (byte_buf & 16'hFF00) >> 8;
        input_2 = (byte_buf & 16'h00FF);
    }

    function add_three_without_adding_carry (
        input_1: ref   logic<8>,
        input_2: ref   logic<8>,
        input_3: input logic<8>,
    ) {
        let byte_buf: logic<16> = input_2 + input_3;
        input_2  = utilPkg::wrapping_add(input_2, input_3);
        if byte_buf >= 16'h100 {
            input_1 = utilPkg::wrapping_add(input_1, 1);
        }
    }

    function set_v (
        current_p: ref   logic<8>,
        flag     : input logic   ,
    ) {
        current_p = if flag {
            current_p | 8'b01000000
        } else {
            current_p & 8'b10111111
        };
    }

    function set_n (
        current_p: ref   logic<8>,
        flag     : input logic   ,
    ) {
        current_p = if flag {
            current_p | 8'b10000000
        } else {
            current_p & 8'b01111111
        };
    }

    function set_nz (
        current_p : ref   logic<8>,
        input_data: input logic<8>,
    ) {
        set_z(current_p, input_data == 0);
        set_n(current_p, input_data >= 8'h80);
    }

    function compare_with_nzc (
        current_p : ref   logic<8>,
        left_data : input logic<8>,
        right_data: input logic<8>,
    ) {
        set_c(current_p, left_data >= right_data);
        set_z(current_p, left_data == right_data);
        if left_data <: right_data || left_data - right_data >= 8'h80 {
            set_n(current_p, 1);
        } else {
            set_n(current_p, 0);
        }
    }
}
