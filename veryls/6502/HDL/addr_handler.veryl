module AddrHandler (
    i_clk                 : input   logic                    ,
    i_rst                 : input   logic                    ,
    i_en                  : input   logic                    ,
    i_we                  : input   logic                    ,
    i_rx                  : input   logic                    ,
    i_debug_mock_memory_en: input   logic                    ,
    i_addr_mode           : input   OperatorsPkg::AddrMode   ,
    i_sequence_en         : input   logic                    ,
    if_register_mst       : modport RegisterIf::Master       ,
    if_register_slv       : modport RegisterIf::Slave        ,
    if_memory_mst         : modport MemoryIf::Master         ,
    if_memory_slv         : modport MemoryIf::Slave          ,
    o_target_low_addr     : output  logic                 <8>,
    o_target_high_addr    : output  logic                 <8>,
    o_tx                  : output  logic                    ,
    o_rts                 : output  logic                    ,
    o_busy                : output  logic                    ,
    o_finish              : output  logic                    ,
) {
    enum Status: logic<3> {
        Ready,
        ReadTargetLowAddr,
        ReadTargetHighAddr,
        ReadLowMemory,
        ReadHighMemory,
        ReadWordMemory,
        AdjustRegister,
        Finish,
    }

    var o_target_low_addr_next : logic<8>;
    var o_target_high_addr_next: logic<8>;
    var o_tx_next              : logic   ;
    var o_rts_next             : logic   ;

    let i_read_low_addr_en     : logic     = status == Status::ReadTargetLowAddr;
    let i_read_low_addr_addr   : logic<16> = if_register_slv.pc + 1;
    var o_read_low_addr_data   : logic<8> ;
    var o_read_low_addr_busy   : logic    ;
    var o_read_low_addr_rts    : logic    ;
    var o_read_low_addr_finish : logic    ;
    inst if_read_low_addr_memory: MemoryIf;
    inst read_low_addr: ReadAddr (
        i_clk                                   ,
        i_rst                                   ,
        i_en           : i_read_low_addr_en     ,
        i_rx                                    ,
        i_sequence_en                           ,
        i_sequence_addr: i_read_low_addr_addr   ,
        if_register_slv                         ,
        if_memory_mst  : if_read_low_addr_memory,
        if_memory_slv                           ,
        o_data         : o_read_low_addr_data   ,
        o_busy         : o_read_low_addr_busy   ,
        o_rts          : o_read_low_addr_rts    ,
        o_finish       : o_read_low_addr_finish ,
    );

    let i_read_high_addr_en     : logic     = status == Status::ReadTargetHighAddr;
    let i_read_high_addr_addr   : logic<16> = if_register_slv.pc + 2;
    var o_read_high_addr_data   : logic<8> ;
    var o_read_high_addr_busy   : logic    ;
    var o_read_high_addr_rts    : logic    ;
    var o_read_high_addr_finish : logic    ;
    inst if_read_high_addr_memory: MemoryIf;
    inst read_high_addr: ReadAddr (
        i_clk                                    ,
        i_rst                                    ,
        i_en           : i_read_high_addr_en     ,
        i_rx                                     ,
        i_sequence_en                            ,
        i_sequence_addr: i_read_high_addr_addr   ,
        if_register_slv                          ,
        if_memory_mst  : if_read_high_addr_memory,
        if_memory_slv                            ,
        o_data         : o_read_high_addr_data   ,
        o_busy         : o_read_high_addr_busy   ,
        o_rts          : o_read_high_addr_rts    ,
        o_finish       : o_read_high_addr_finish ,
    );

    let i_read_low_memory_en     : logic    = status == Status::ReadLowMemory;
    var o_read_low_memory_data   : logic<8>;
    var o_read_low_memory_tx     : logic   ;
    var o_read_low_memory_rts    : logic   ;
    var o_read_low_memory_busy   : logic   ;
    var o_read_low_memory_finish : logic   ;
    inst if_read_low_memory_memory: MemoryIf;
    inst read_low_memory: ReadMemory (
        i_clk                                            ,
        i_rst                                            ,
        i_en                  : i_read_low_memory_en     ,
        i_we                                             ,
        i_rx                                             ,
        i_debug_mock_memory_en                           ,
        i_target_low_addr     : o_target_low_addr        ,
        i_target_high_addr    : 0                        ,
        if_memory_mst         : if_read_low_memory_memory,
        if_memory_slv                                    ,
        o_data                : o_read_low_memory_data   ,
        o_tx                  : o_read_low_memory_tx     ,
        o_rts                 : o_read_low_memory_rts    ,
        o_busy                : o_read_low_memory_busy   ,
        o_finish              : o_read_low_memory_finish ,
    );

    let i_read_high_memory_en     : logic    = status == Status::ReadHighMemory;
    var o_read_high_memory_data   : logic<8>;
    var o_read_high_memory_tx     : logic   ;
    var o_read_high_memory_rts    : logic   ;
    var o_read_high_memory_busy   : logic   ;
    var o_read_high_memory_finish : logic   ;
    inst if_read_high_memory_memory: MemoryIf;
    inst read_high_memory: ReadMemory (
        i_clk                                             ,
        i_rst                                             ,
        i_en                  : i_read_high_memory_en     ,
        i_we                                              ,
        i_rx                                              ,
        i_debug_mock_memory_en                            ,
        i_target_low_addr     : o_target_high_addr        ,
        i_target_high_addr    : 0                         ,
        if_memory_mst         : if_read_high_memory_memory,
        if_memory_slv                                     ,
        o_data                : o_read_high_memory_data   ,
        o_tx                  : o_read_high_memory_tx     ,
        o_rts                 : o_read_high_memory_rts    ,
        o_busy                : o_read_high_memory_busy   ,
        o_finish              : o_read_high_memory_finish ,
    );

    var status       : Status    ;
    var status_next  : Status    ;
    var o_busy_next  : logic     ;
    var o_finish_next: logic     ;
    var o_p_next     : logic <8> ;
    var o_pc_next    : logic <16>;

    var if_memory_mst_en_next  : logic    ;
    var if_memory_mst_we_next  : logic    ;
    var if_memory_mst_addr_next: logic<16>;
    var if_memory_mst_data_next: logic<8> ;
    always_comb {
        status_next             = status;
        o_finish_next           = o_finish;
        o_target_low_addr_next  = o_target_low_addr;
        o_target_high_addr_next = o_target_high_addr;
        o_rts_next              = o_rts;
        o_tx_next               = o_tx;
        o_p_next                = if_register_mst.p;
        o_pc_next               = if_register_mst.pc;
        if_memory_mst_en_next   = if_memory_mst.en;
        if_memory_mst_we_next   = if_memory_mst.we;
        if_memory_mst_addr_next = if_memory_mst.addr;
        if_memory_mst_data_next = if_memory_mst.data;
        case status {
            Status::Ready: {
                o_p_next = if_register_slv.p;
                if i_en {
                    o_pc_next = if_register_slv.pc + 1;
                    if i_addr_mode == OperatorsPkg::AddrMode::Impl || i_addr_mode == OperatorsPkg::AddrMode::Acc {
                        status_next = Status::AdjustRegister;
                    } else {
                        status_next = Status::ReadTargetLowAddr;
                    }
                }
            }
            Status::ReadTargetLowAddr: {
                o_rts_next              = o_read_low_addr_rts;
                o_tx_next               = 1;
                if_memory_mst_en_next   = if_read_low_addr_memory.en;
                if_memory_mst_we_next   = if_read_low_addr_memory.we;
                if_memory_mst_addr_next = if_read_low_addr_memory.addr;
                if_memory_mst_data_next = if_read_low_addr_memory.data;
                if o_read_low_addr_finish {
                    if i_addr_mode == OperatorsPkg::AddrMode::ZpX {
                        o_target_low_addr_next = utilPkg::wrapping_add(o_read_low_addr_data, if_register_slv.x);
                    } else if i_addr_mode == OperatorsPkg::AddrMode::ZpY {
                        o_target_low_addr_next = utilPkg::wrapping_add(o_read_low_addr_data, if_register_slv.y);
                    } else if i_addr_mode == OperatorsPkg::AddrMode::IndX {
                        o_target_low_addr_next  = utilPkg::wrapping_add(o_read_low_addr_data, if_register_slv.x);
                        o_target_high_addr_next = utilPkg::wrapping_add(o_read_low_addr_data, if_register_slv.x + 1);
                    } else if i_addr_mode == OperatorsPkg::AddrMode::IndY {
                        o_target_low_addr_next  = o_read_low_addr_data;
                        o_target_high_addr_next = utilPkg::wrapping_add(o_read_low_addr_data, 1);
                    } else if i_addr_mode == OperatorsPkg::AddrMode::Rel {
                        RegisterPkg::rel(o_pc_next, o_target_high_addr_next, o_target_low_addr_next, o_read_low_addr_data);
                    } else {
                        o_target_low_addr_next = o_read_low_addr_data;
                    }

                    if i_addr_mode == OperatorsPkg::AddrMode::Imm || i_addr_mode == OperatorsPkg::AddrMode::Zp || i_addr_mode == OperatorsPkg::AddrMode::ZpX || i_addr_mode == OperatorsPkg::AddrMode::ZpY || i_addr_mode == OperatorsPkg::AddrMode::Rel {
                        status_next = Status::AdjustRegister;
                    } else if i_addr_mode == OperatorsPkg::AddrMode::IndX || i_addr_mode == OperatorsPkg::AddrMode::IndY {
                        status_next = Status::ReadLowMemory;
                    } else {
                        status_next = Status::ReadTargetHighAddr;
                    }
                }
            }
            Status::ReadTargetHighAddr: {
                o_tx_next               = 1;
                o_rts_next              = o_read_high_addr_rts;
                if_memory_mst_en_next   = if_read_high_addr_memory.en;
                if_memory_mst_we_next   = if_read_high_addr_memory.we;
                if_memory_mst_addr_next = if_read_high_addr_memory.addr;
                if_memory_mst_data_next = if_read_high_addr_memory.data;
                if o_read_high_addr_finish {
                    o_target_high_addr_next = o_read_high_addr_data;
                    if i_addr_mode == OperatorsPkg::AddrMode::Ind {
                        status_next = Status::ReadLowMemory;
                    } else {
                        status_next = Status::AdjustRegister;
                    }
                }
            }
            Status::ReadLowMemory: {
                o_tx_next               = o_read_low_memory_tx;
                o_rts_next              = o_read_low_memory_rts;
                if_memory_mst_en_next   = if_read_low_memory_memory.en;
                if_memory_mst_we_next   = if_read_low_memory_memory.we;
                if_memory_mst_addr_next = if_read_low_memory_memory.addr;
                if_memory_mst_data_next = if_read_low_memory_memory.data;
                if o_read_low_memory_finish {
                    o_target_low_addr_next = o_read_low_memory_data;
                    if i_addr_mode == OperatorsPkg::AddrMode::Ind || i_addr_mode == OperatorsPkg::AddrMode::IndX || i_addr_mode == OperatorsPkg::AddrMode::IndY {
                        status_next = Status::ReadHighMemory;
                    } else {
                        status_next = Status::AdjustRegister;
                    }
                }
            }
            Status::ReadHighMemory: {
                o_tx_next               = o_read_high_memory_tx;
                o_rts_next              = o_read_high_memory_rts;
                if_memory_mst_en_next   = if_read_high_memory_memory.en;
                if_memory_mst_we_next   = if_read_high_memory_memory.we;
                if_memory_mst_addr_next = if_read_high_memory_memory.addr;
                if_memory_mst_data_next = if_read_high_memory_memory.data;
                if o_read_high_memory_finish {
                    o_target_high_addr_next = o_read_high_memory_data;
                    status_next             = Status::AdjustRegister;
                }
            }
            Status::AdjustRegister: {
                status_next = Status::Finish;

                if i_addr_mode == OperatorsPkg::AddrMode::Imm || i_addr_mode == OperatorsPkg::AddrMode::Zp || i_addr_mode == OperatorsPkg::AddrMode::ZpX || i_addr_mode == OperatorsPkg::AddrMode::ZpY || i_addr_mode == OperatorsPkg::AddrMode::Rel || i_addr_mode == OperatorsPkg::AddrMode::IndX || i_addr_mode == OperatorsPkg::AddrMode::IndY {
                    o_pc_next += 1;
                } else if i_addr_mode == OperatorsPkg::AddrMode::Abs || i_addr_mode == OperatorsPkg::AddrMode::AbsX || i_addr_mode == OperatorsPkg::AddrMode::AbsY || i_addr_mode == OperatorsPkg::AddrMode::Ind {
                    o_pc_next += 2;
                }

                if i_addr_mode == OperatorsPkg::AddrMode::AbsX {
                    RegisterPkg::add_three_without_adding_carry(o_target_high_addr_next, o_target_low_addr_next, if_register_slv.x);
                } else if i_addr_mode == OperatorsPkg::AddrMode::AbsY || i_addr_mode == OperatorsPkg::AddrMode::IndY {
                    RegisterPkg::add_three_without_adding_carry(o_target_high_addr_next, o_target_low_addr_next, if_register_slv.y);
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            if_register_mst.p  = 36;
            if_register_mst.pc = 0;
            status             = Status::Ready;
            o_target_low_addr  = 0;
            o_target_high_addr = 0;
            o_tx               = 0;
            o_rts              = 0;
            o_busy             = 0;
            o_finish           = 0;
            if_memory_mst.en   = 0;
            if_memory_mst.we   = 0;
            if_memory_mst.addr = 0;
            if_memory_mst.data = 0;
        } else {
            if_register_mst.p  = o_p_next;
            if_register_mst.pc = o_pc_next;
            status             = status_next;
            o_target_low_addr  = o_target_low_addr_next;
            o_target_high_addr = o_target_high_addr_next;
            o_tx               = o_tx_next;
            o_rts              = o_rts_next;
            o_busy             = o_busy_next;
            o_finish           = o_finish_next;
            if_memory_mst.en   = if_memory_mst_en_next;
            if_memory_mst.we   = if_memory_mst_we_next;
            if_memory_mst.addr = if_memory_mst_addr_next;
            if_memory_mst.data = if_memory_mst_data_next;
        }
    }
}
