module main (
    CLK     : input  logic   ,
    RST     : input  logic   ,
    KEY     : input  logic<3>,
    GPIO_0_1: input  logic   , // RX
    GPIO_0_3: input  logic   , // CTS
    GPIO_0_6: input  logic   , // RESB
    GPIO_0_0: output logic   , // TX
    GPIO_0_2: output logic   , // RTS
    GPIO_0_4: output logic   , // RW
    GPIO_0_5: output logic   , // Nop(Low if cpumode is not nop)
) {
    var CTS  : logic     = GPIO_0_3;
    var RESB : logic     = GPIO_0_6;
    var a    : logic<8> ;
    var x    : logic<8> ;
    var y    : logic<8> ;
    var p    : logic<8> ;
    var pc   : logic<16>;
    var reset: logic     = RST || RESB;

    var mode               : ModePkg::CpuMode;
    var tmp_mode           : ModePkg::CpuMode;
    var mode_handler_en    : logic            = (mode == ModePkg::CpuMode::nop);
    var mode_handler_rts   : logic           ;
    var mode_handler_busy  : logic           ;
    var mode_handler_finish: logic           ;
    inst mode_handler: ModeHandler (
        CLK                         ,
        RST    : reset              ,
        EN     : mode_handler_en    ,
        DATA_IN: GPIO_0_1           ,
        mode   : tmp_mode           ,
        RTS    : mode_handler_rts   ,
        busy   : mode_handler_busy  ,
        finish : mode_handler_finish,
    );
    assign mode = if debug_finish {
        ModePkg::CpuMode::nop
    } else {
        tmp_mode
    };

    var debug_en         : logic     = mode == ModePkg::CpuMode::debug;
    var debug_tx_en      : logic     = ~CTS;
    var debug_busy       : logic    ;
    var debug_tx_data_out: logic    ;
    var debug_rw         : logic    ;
    var debug_finish     : logic    ;
    var tmp_a            : logic<8> ;
    var tmp_x            : logic<8> ;
    var tmp_y            : logic<8> ;
    var tmp_p            : logic<8> ;
    var tmp_pc           : logic<16>;
    var debug_rts        : logic    ;
    inst debug: Debug (
        CLK                           ,
        RST        : reset            ,
        DATA_IN    : GPIO_0_1         ,
        EN         : debug_en         ,
        WE         : debug_tx_en      ,
        a_a        : a                ,
        a_x        : x                ,
        a_y        : y                ,
        a_p        : p                ,
        tx_data_out: debug_tx_data_out,
        busy       : debug_busy       ,
        RTS        : debug_rts        ,
        rw         : debug_rw         ,
        finish     : debug_finish     ,
        a          : tmp_a            ,
        x          : tmp_x            ,
        y          : tmp_y            ,
        p          : tmp_p            ,
        pc         : tmp_pc           ,
    );

    assign a  = tmp_a;
    assign x  = tmp_x;
    assign y  = tmp_y;
    assign p  = tmp_p;
    assign pc = tmp_pc;

    assign GPIO_0_0 = if mode == ModePkg::CpuMode::debug {
        if debug_tx_en {
            debug_tx_data_out
        } else {
            1
        }
    } else {
        1
    };
    assign GPIO_0_2 = if mode_handler_en {
        ~mode_handler_busy
    } else if debug_busy {
        debug_rts
    } else {
        1
    };
    assign GPIO_0_4 = if debug_en {
        debug_rw
    } else {
        1
    };

    assign GPIO_0_5 = mode == ModePkg::CpuMode::nop;
}
