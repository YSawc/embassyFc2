module main (
    CLK     : input  logic   ,
    RST     : input  logic   ,
    KEY     : input  logic<3>,
    GPIO_0_1: input  logic   , // RX
    GPIO_0_3: input  logic   , // CTS
    GPIO_0_6: input  logic   , // RESB
    GPIO_0_0: output logic   , // TX
    GPIO_0_2: output logic   , // RTS
    GPIO_0_4: output logic   , // RW
    GPIO_0_5: output logic   , // Nop(Low if cpumode is not nop)
) {
    var CTS     : logic = GPIO_0_3;
    var RESB    : logic = GPIO_0_6;
    var reset   : logic = RST || RESB;
    inst register: RegisterIf;

    var mode               : ModePkg::CpuMode;
    var tmp_mode           : ModePkg::CpuMode;
    var mode_handler_en    : logic            = (mode == ModePkg::CpuMode::nop);
    var mode_handler_rts   : logic           ;
    var mode_handler_busy  : logic           ;
    var mode_handler_finish: logic           ;
    inst mode_handler: ModeHandler (
        CLK                         ,
        RST    : reset              ,
        EN     : mode_handler_en    ,
        DATA_IN: GPIO_0_1           ,
        mode   : tmp_mode           ,
        RTS    : mode_handler_rts   ,
        busy   : mode_handler_busy  ,
        finish : mode_handler_finish,
    );
    assign mode = if debug_finish {
        ModePkg::CpuMode::nop
    } else {
        tmp_mode
    };

    var debug_en         : logic = mode == ModePkg::CpuMode::debug;
    var debug_tx_en      : logic = ~CTS;
    var debug_busy       : logic;
    var debug_tx_data_out: logic;
    var debug_rw         : logic;
    var debug_finish     : logic;
    inst debug_register   : RegisterIf;
    var debug_rts        : logic;
    inst debug: Debug (
        CLK                            ,
        RST         : reset            ,
        DATA_IN     : GPIO_0_1         ,
        EN          : debug_en         ,
        WE          : debug_tx_en      ,
        register_mst: debug_register   ,
        register_slv: register         ,
        tx_data_out : debug_tx_data_out,
        busy        : debug_busy       ,
        RTS         : debug_rts        ,
        rw          : debug_rw         ,
        finish      : debug_finish     ,
    );

    assign GPIO_0_0 = if mode == ModePkg::CpuMode::debug {
        if debug_tx_en {
            debug_tx_data_out
        } else {
            1
        }
    } else {
        1
    };
    assign GPIO_0_2 = if mode_handler_en {
        ~mode_handler_busy
    } else if debug_busy {
        debug_rts
    } else {
        1
    };
    assign GPIO_0_4 = if debug_en {
        debug_rw
    } else {
        1
    };

    assign GPIO_0_5 = mode == ModePkg::CpuMode::nop;
    always_ff (posedge CLK, async_high RST) {
        if_reset {
            register.a  = 0;
            register.x  = 0;
            register.y  = 0;
            register.s  = 0;
            register.p  = 0;
            register.pc = 0;
        } else {
            register.a  = debug_register.a;
            register.x  = debug_register.x;
            register.y  = debug_register.y;
            register.s  = debug_register.s;
            register.p  = debug_register.p;
            register.pc = debug_register.pc;
        }
    }
}
