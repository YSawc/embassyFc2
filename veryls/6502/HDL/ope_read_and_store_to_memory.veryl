module OpeReadAndStoreToMemory (
    i_clk             : input   logic                   ,
    i_rst             : input   logic                   ,
    i_en              : input   logic                   ,
    i_we              : input   logic                   ,
    i_rx              : input   logic                   ,
    i_ope_kind        : input   OperatorsPkg::OpeKind   ,
    i_target_low_addr : input   logic                <8>,
    i_target_high_addr: input   logic                <8>,
    if_register_slv   : modport RegisterIf::Slave       ,
    if_register_mst   : modport RegisterIf::Master      ,
    o_tx              : output  logic                   ,
    o_rts             : output  logic                   ,
    o_busy            : output  logic                   ,
    o_finish          : output  logic                   ,
) {
    enum Status: logic<3> {
        Ready,
        ReadMemory,
        PreWrite,
        WriteMemory,
        Finish,
    }
    var status_next              : Status    ;
    var status                   : Status    ;
    var o_s_next                 : logic <8> ;
    var o_p_next                 : logic <8> ;
    var o_pc_next                : logic <16>;
    var o_busy_next              : logic     ;
    var o_finish_next            : logic     ;
    var o_rts_next               : logic     ;
    var i_send_data_next         : logic <8> ;
    var i_send_data              : logic <8> ;
    var write_count              : logic <2> ;
    var write_count_next         : logic <2> ;
    var read_count               : logic <2> ;
    var read_count_next          : logic <2> ;
    var pc_low_tmp               : logic <8> ;
    var o_pc_low_tmp_next        : logic <8> ;
    var pc_high_tmp              : logic <8> ;
    var o_pc_high_tmp_next       : logic <8> ;
    var tmp_target_low_addr_next : logic <8> ;
    var tmp_target_low_addr      : logic <8> ;
    var tmp_target_high_addr_next: logic <8> ;
    var tmp_target_high_addr     : logic <8> ;

    let i_read_memory_en    : logic    = status == Status::ReadMemory;
    var o_read_memory_data  : logic<8>;
    var o_read_memory_tx    : logic   ;
    var o_read_memory_rts   : logic   ;
    var o_read_memory_busy  : logic   ;
    var o_read_memory_finish: logic   ;
    inst read_memory: ReadMemory (
        i_clk                                   ,
        i_rst                                   ,
        i_en              : i_read_memory_en    ,
        i_we                                    ,
        i_rx                                    ,
        i_target_low_addr : tmp_target_low_addr ,
        i_target_high_addr: tmp_target_high_addr,
        o_data            : o_read_memory_data  ,
        o_tx              : o_read_memory_tx    ,
        o_rts             : o_read_memory_rts   ,
        o_busy            : o_read_memory_busy  ,
        o_finish          : o_read_memory_finish,
    );

    let i_write_memory_en    : logic = status == Status::WriteMemory;
    var o_write_memory_tx    : logic;
    var o_write_memory_busy  : logic;
    var o_write_memory_finish: logic;
    inst write_memory: WriteMemory (
        i_clk                                    ,
        i_rst                                    ,
        i_en              : i_write_memory_en    ,
        i_we                                     ,
        i_rx                                     ,
        i_target_low_addr : tmp_target_low_addr  ,
        i_target_high_addr: tmp_target_high_addr ,
        i_send_data                              ,
        o_tx              : o_write_memory_tx    ,
        o_busy            : o_write_memory_busy  ,
        o_finish          : o_write_memory_finish,
    );

    assign o_rts_next = if status == Status::ReadMemory {
        o_read_memory_rts
    } else {
        1
    };

    assign o_tx = if status == Status::ReadMemory {
        o_read_memory_tx
    } else if status == Status::WriteMemory {
        o_write_memory_tx
    } else {
        1
    };

    always_comb {
        o_s_next                  = if_register_mst.s;
        o_p_next                  = if_register_mst.p;
        o_pc_next                 = if_register_mst.pc;
        status_next               = status;
        o_finish_next             = o_finish;
        i_send_data_next          = i_send_data;
        write_count_next          = write_count;
        read_count_next           = read_count;
        o_pc_low_tmp_next         = pc_low_tmp;
        o_pc_high_tmp_next        = pc_high_tmp;
        tmp_target_low_addr_next  = tmp_target_low_addr;
        tmp_target_high_addr_next = tmp_target_high_addr;
        case status {
            Status::Ready: {
                if i_en {
                    if write_count == 0 && read_count == 0 {
                        o_s_next  = if_register_slv.s;
                        o_p_next  = if_register_slv.p;
                        o_pc_next = if_register_slv.pc;
                    }
                    if i_ope_kind == OperatorsPkg::OpeKind::Brk {
                        if (o_p_next & 8'b00000100) == 0 {
                            tmp_target_low_addr_next  = o_s_next;
                            tmp_target_high_addr_next = 1;
                            o_s_next                  = utilPkg::wrapping_sub(o_s_next, 1);
                            if write_count == 0 {
                                o_pc_next        -= 1;
                                i_send_data_next =  (if_register_slv.pc & 16'hFF00) >> 8;
                                status_next      =  Status::WriteMemory;
                            } else if write_count == 1 {
                                i_send_data_next = if_register_slv.pc & 16'h00FF;
                                status_next      = Status::WriteMemory;
                            } else if write_count == 2 {
                                i_send_data_next = if_register_slv.p;
                                status_next      = Status::WriteMemory;
                            }
                        } else {
                            status_next = Status::Finish;
                        }
                    } else {
                        tmp_target_low_addr_next  = i_target_low_addr;
                        tmp_target_high_addr_next = i_target_high_addr;
                        status_next               = Status::ReadMemory;
                    }
                }
            }
            Status::ReadMemory: {
                if o_read_memory_finish {
                    status_next = Status::PreWrite;
                }
            }
            Status::PreWrite: {
                if i_ope_kind == OperatorsPkg::OpeKind::Brk {
                    if read_count == 0 {
                        read_count_next           += 1;
                        tmp_target_low_addr_next  =  8'hFF;
                        tmp_target_high_addr_next =  8'hFF;
                        o_pc_high_tmp_next        =  o_read_memory_data;
                        status_next               =  Status::ReadMemory;
                    } else if read_count == 1 {
                        o_pc_low_tmp_next = o_read_memory_data;
                        o_pc_next         = (o_pc_high_tmp_next << 8) + o_pc_low_tmp_next;
                        write_count_next  = 0;
                        read_count_next   = 0;
                        status_next       = Status::Finish;
                    }
                } else {
                    if i_ope_kind == OperatorsPkg::OpeKind::Inc {
                        i_send_data_next = RegisterPkg::add_with_nz(o_p_next, o_read_memory_data, 1);
                    } else if i_ope_kind == OperatorsPkg::OpeKind::Dec {
                        i_send_data_next = RegisterPkg::sub_with_nz(o_p_next, o_read_memory_data, 1);
                    }
                    status_next = Status::WriteMemory;
                }
            }
            Status::WriteMemory: {
                if o_write_memory_finish {
                    if i_ope_kind == OperatorsPkg::OpeKind::Brk {
                        if write_count <= 1 {
                            write_count_next += 1;
                            status_next      =  Status::Ready;
                        } else if write_count == 2 {
                            o_p_next                  |= 8'b00010100;
                            tmp_target_low_addr_next  =  8'hFE;
                            tmp_target_high_addr_next =  8'hFF;
                            status_next               =  Status::ReadMemory;
                        }
                    } else {
                        status_next = Status::Finish;
                    }
                }
            }
            Status::Finish: {
                status_next = Status::Ready;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            if_register_mst.s    = 0;
            if_register_mst.p    = 0;
            if_register_mst.pc   = 0;
            status               = Status::Ready;
            i_send_data          = 0;
            o_busy               = 0;
            o_finish             = 0;
            o_rts                = 0;
            tmp_target_low_addr  = 0;
            tmp_target_high_addr = 0;
            write_count          = 0;
            read_count           = 0;
            pc_low_tmp           = 0;
            pc_high_tmp          = 0;
        } else {
            if_register_mst.s    = o_s_next;
            if_register_mst.p    = o_p_next;
            if_register_mst.pc   = o_pc_next;
            status               = status_next;
            i_send_data          = i_send_data_next;
            o_busy               = o_busy_next;
            o_finish             = o_finish_next;
            o_rts                = o_rts_next;
            tmp_target_low_addr  = tmp_target_low_addr_next;
            tmp_target_high_addr = tmp_target_high_addr_next;
            write_count          = write_count_next;
            read_count           = read_count_next;
            pc_low_tmp           = o_pc_low_tmp_next;
            pc_high_tmp          = o_pc_high_tmp_next;
        }
    }
}
