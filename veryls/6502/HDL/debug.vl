module Debug (
    CLK      : input  logic   ,
    RST      : input  logic   ,
    DATA_IN  : input  logic   ,
    EN       : input  logic   ,
    addr_low : output logic<8>,
    addr_high: output logic<8>,
    busy     : output logic   ,
) {
    var a: logic<8> = 8'h01;
    // var x       : logic<8> = 8'h02;
    // var y       : logic<8> = 8'h03;
    // var imm_addr: logic<8> = 8'h04;
    // var ll      : logic<8> = 8'h05;
    // var hh      : logic<8> = 8'h06;

    enum Status: logic<3> {
        idle,
        work,
    }

    enum OpeKind: logic<7> {
        Adc,
        Sbc, // flags: N V Z C

        And,
        Ora,
        Eor, // flags: N Z

        Asl,
        Lsr,
        Rol,
        Ror, // flags: N Z C

        Bcc,
        Bcs,
        Beq,
        Bne,
        Bvc,
        Bvs,
        Bpl,
        Bmi, // flags: none

        Bit, // flags: N V Z

        Jmp,
        Jsr,
        Rts, // flags: none

        Brk, // flags: Bi
        Rti, // flags: all

        Cmp,
        Cpx,
        Cpy,
        Inc,
        Dec,
        Inx,
        Dex,
        Iny,
        Dey, // flags: N Z

        Clc,
        Sec,
        Cli,
        Sei,
        Cld,
        Sed,
        Clv, // flags: N Z

        Lda,
        Ldx,
        Ldy, // flags: N Z

        Sta,
        Stx,
        Sty, // flags: none

        Tax,
        Txa,
        Tay,
        Tya,
        Tsx, // flags: N Z
        Txs, // flags: none

        Pha, // flags: none
        Pla, // flags: N Z
        Php, // flags: none
        Plp, // flags: all
        Nop, // flags: none

        Dop,
        Kil,
        Slo,
        Aac,
        Atx,
        Top,
        Rla,
        Sre,
        Dcp,
        Asr,
        Rra,
        Arr,
        Sax,
        Xaa,
        Axa,
        Xas,
        Sxa,
        Sya,
        Lax,
        Lxa,
        Lar,
        Las,
        Axs,
        Isb,
    }

    enum AddrMode: logic<4> {
        Stop,
        Acc,
        Imm,
        Abs,
        AbsX,
        AbsY,
        Zp,
        ZpX,
        ZpY,
        Impl,
        Rel,
        IndX,
        IndY,
        Ind,
        Nop,
    }

    struct Operator {
        ope_kind : OpeKind ,
        addr_mode: AddrMode,
    }

    var operators: Operator<8'hff>;
    assign operators = { //
    {OpeKind::Brk, AddrMode::Impl}, //
     {OpeKind::Ora, AddrMode::IndX}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Slo, AddrMode::IndX}, //
     {OpeKind::Dop, AddrMode::Zp}, //
     {OpeKind::Ora, AddrMode::Zp}, //
     {OpeKind::Asl, AddrMode::Zp}, //
     {OpeKind::Slo, AddrMode::Zp}, //
     {OpeKind::Php, AddrMode::Impl}, //
     {OpeKind::Ora, AddrMode::Imm}, //
     {OpeKind::Asl, AddrMode::Acc}, //
     {OpeKind::Aac, AddrMode::Imm}, //
     {OpeKind::Top, AddrMode::Abs}, //
     {OpeKind::Ora, AddrMode::Abs}, //
     {OpeKind::Asl, AddrMode::Abs}, //
     {OpeKind::Slo, AddrMode::Abs}, //
     {OpeKind::Bpl, AddrMode::Rel}, //
     {OpeKind::Ora, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Slo, AddrMode::IndY}, //
     {OpeKind::Dop, AddrMode::ZpX}, //
     {OpeKind::Ora, AddrMode::ZpX}, //
     {OpeKind::Asl, AddrMode::ZpX}, //
     {OpeKind::Slo, AddrMode::ZpX}, //
     {OpeKind::Clc, AddrMode::Impl}, //
     {OpeKind::Ora, AddrMode::AbsY}, //
     {OpeKind::Nop, AddrMode::Nop}, //
     {OpeKind::Slo, AddrMode::AbsY}, //
     {OpeKind::Top, AddrMode::AbsX}, //
     {OpeKind::Ora, AddrMode::AbsX}, //
     {OpeKind::Asl, AddrMode::AbsX}, //
     {OpeKind::Slo, AddrMode::AbsX}, //
     {OpeKind::Jsr, AddrMode::Abs}, //
     {OpeKind::And, AddrMode::IndX}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Rla, AddrMode::IndX}, //
     {OpeKind::Bit, AddrMode::Zp}, //
     {OpeKind::And, AddrMode::Zp}, //
     {OpeKind::Rol, AddrMode::Zp}, //
     {OpeKind::Rla, AddrMode::Zp}, //
     {OpeKind::Plp, AddrMode::Impl}, //
     {OpeKind::And, AddrMode::Imm}, //
     {OpeKind::Rol, AddrMode::Acc}, //
     {OpeKind::Aac, AddrMode::Imm}, //
     {OpeKind::Bit, AddrMode::Abs}, //
     {OpeKind::And, AddrMode::Abs}, //
     {OpeKind::Rol, AddrMode::Abs}, //
     {OpeKind::Rla, AddrMode::Abs}, //
     {OpeKind::Bmi, AddrMode::Rel}, //
     {OpeKind::And, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Rla, AddrMode::IndY}, //
     {OpeKind::Dop, AddrMode::ZpX}, //
     {OpeKind::And, AddrMode::ZpX}, //
     {OpeKind::Rol, AddrMode::ZpX}, //
     {OpeKind::Rla, AddrMode::ZpX}, //
     {OpeKind::Sec, AddrMode::Impl}, //
     {OpeKind::And, AddrMode::AbsY}, //
     {OpeKind::Nop, AddrMode::Nop}, //
     {OpeKind::Rla, AddrMode::AbsY}, //
     {OpeKind::Top, AddrMode::AbsX}, //
     {OpeKind::And, AddrMode::AbsX}, //
     {OpeKind::Rol, AddrMode::AbsX}, //
     {OpeKind::Rla, AddrMode::AbsX}, //
     {OpeKind::Rti, AddrMode::Impl}, //
     {OpeKind::Eor, AddrMode::IndX}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Sre, AddrMode::IndX}, //
     {OpeKind::Dop, AddrMode::Zp}, //
     {OpeKind::Eor, AddrMode::Zp}, //
     {OpeKind::Lsr, AddrMode::Zp}, //
     {OpeKind::Sre, AddrMode::Zp}, //
     {OpeKind::Pha, AddrMode::Impl}, //
     {OpeKind::Eor, AddrMode::Imm}, //
     {OpeKind::Lsr, AddrMode::Acc}, //
     {OpeKind::Asr, AddrMode::Imm}, //
     {OpeKind::Jmp, AddrMode::Abs}, //
     {OpeKind::Eor, AddrMode::Abs}, //
     {OpeKind::Lsr, AddrMode::Abs}, //
     {OpeKind::Sre, AddrMode::Abs}, //
     {OpeKind::Bvc, AddrMode::Rel}, //
     {OpeKind::Eor, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Sre, AddrMode::IndY}, //
     {OpeKind::Dop, AddrMode::ZpX}, //
     {OpeKind::Eor, AddrMode::ZpX}, //
     {OpeKind::Lsr, AddrMode::ZpX}, //
     {OpeKind::Sre, AddrMode::ZpX}, //
     {OpeKind::Cli, AddrMode::Impl}, //
     {OpeKind::Eor, AddrMode::AbsY}, //
     {OpeKind::Nop, AddrMode::Nop}, //
     {OpeKind::Sre, AddrMode::AbsY}, //
     {OpeKind::Top, AddrMode::AbsX}, //
     {OpeKind::Eor, AddrMode::AbsX}, //
     {OpeKind::Lsr, AddrMode::AbsX}, //
     {OpeKind::Sre, AddrMode::AbsX}, //
     {OpeKind::Rts, AddrMode::Impl}, //
     {OpeKind::Adc, AddrMode::IndX}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Rra, AddrMode::IndX}, //
     {OpeKind::Dop, AddrMode::Zp}, //
     {OpeKind::Adc, AddrMode::Zp}, //
     {OpeKind::Ror, AddrMode::Zp}, //
     {OpeKind::Rra, AddrMode::Zp}, //
     {OpeKind::Pla, AddrMode::Impl}, //
     {OpeKind::Adc, AddrMode::Imm}, //
     {OpeKind::Ror, AddrMode::Acc}, //
     {OpeKind::Arr, AddrMode::Imm}, //
     {OpeKind::Jmp, AddrMode::Ind}, //
     {OpeKind::Adc, AddrMode::Abs}, //
     {OpeKind::Ror, AddrMode::Abs}, //
     {OpeKind::Rra, AddrMode::Abs}, //
     {OpeKind::Bvs, AddrMode::Rel}, //
     {OpeKind::Adc, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Rra, AddrMode::IndY}, //
     {OpeKind::Dop, AddrMode::ZpX}, //
     {OpeKind::Adc, AddrMode::ZpX}, //
     {OpeKind::Ror, AddrMode::ZpX}, //
     {OpeKind::Rra, AddrMode::ZpX}, //
     {OpeKind::Sei, AddrMode::Impl}, //
     {OpeKind::Adc, AddrMode::AbsY}, //
     {OpeKind::Nop, AddrMode::Nop}, //
     {OpeKind::Rra, AddrMode::AbsY}, //
     {OpeKind::Top, AddrMode::AbsX}, //
     {OpeKind::Adc, AddrMode::AbsX}, //
     {OpeKind::Ror, AddrMode::AbsX}, //
     {OpeKind::Rra, AddrMode::AbsX}, //
     {OpeKind::Dop, AddrMode::Imm}, //
     {OpeKind::Sta, AddrMode::IndX}, //
     {OpeKind::Dop, AddrMode::Imm}, //
     {OpeKind::Sax, AddrMode::IndX}, //
     {OpeKind::Sty, AddrMode::Zp}, //
     {OpeKind::Sta, AddrMode::Zp}, //
     {OpeKind::Stx, AddrMode::Zp}, //
     {OpeKind::Sax, AddrMode::Zp}, //
     {OpeKind::Dey, AddrMode::Impl}, //
     {OpeKind::Dop, AddrMode::Imm}, //
     {OpeKind::Txa, AddrMode::Impl}, //
     {OpeKind::Xaa, AddrMode::Imm}, //
     {OpeKind::Sty, AddrMode::Abs}, //
     {OpeKind::Sta, AddrMode::Abs}, //
     {OpeKind::Stx, AddrMode::Abs}, //
     {OpeKind::Sax, AddrMode::Abs}, //
     {OpeKind::Bcc, AddrMode::Rel}, //
     {OpeKind::Sta, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Axa, AddrMode::ZpY}, //
     {OpeKind::Sty, AddrMode::ZpX}, //
     {OpeKind::Sta, AddrMode::ZpX}, //
     {OpeKind::Stx, AddrMode::ZpY}, //
     {OpeKind::Sax, AddrMode::ZpY}, //
     {OpeKind::Tya, AddrMode::Impl}, //
     {OpeKind::Sta, AddrMode::AbsY}, //
     {OpeKind::Txs, AddrMode::Impl}, //
     {OpeKind::Xas, AddrMode::AbsY}, //
     {OpeKind::Sya, AddrMode::AbsX}, //
     {OpeKind::Sta, AddrMode::AbsX}, //
     {OpeKind::Sxa, AddrMode::AbsX}, //
     {OpeKind::Axa, AddrMode::AbsY}, //
     {OpeKind::Ldy, AddrMode::Imm}, //
     {OpeKind::Lda, AddrMode::IndX}, //
     {OpeKind::Ldx, AddrMode::Imm}, //
     {OpeKind::Lax, AddrMode::IndX}, //
     {OpeKind::Ldy, AddrMode::Zp}, //
     {OpeKind::Lda, AddrMode::Zp}, //
     {OpeKind::Ldx, AddrMode::Zp}, //
     {OpeKind::Lax, AddrMode::Zp}, //
     {OpeKind::Tay, AddrMode::Impl}, //
     {OpeKind::Lda, AddrMode::Imm}, //
     {OpeKind::Tax, AddrMode::Impl}, //
     {OpeKind::Lxa, AddrMode::Imm}, //
     {OpeKind::Ldy, AddrMode::Abs}, //
     {OpeKind::Lda, AddrMode::Abs}, //
     {OpeKind::Ldx, AddrMode::Abs}, //
     {OpeKind::Lax, AddrMode::Abs}, //
     {OpeKind::Bcs, AddrMode::Rel}, //
     {OpeKind::Lda, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Lax, AddrMode::IndY}, //
     {OpeKind::Ldy, AddrMode::ZpX}, //
     {OpeKind::Lda, AddrMode::ZpX}, //
     {OpeKind::Ldx, AddrMode::ZpY}, //
     {OpeKind::Lax, AddrMode::ZpY}, //
     {OpeKind::Clv, AddrMode::Impl}, //
     {OpeKind::Lda, AddrMode::AbsY}, //
     {OpeKind::Tsx, AddrMode::Impl}, //
     {OpeKind::Las, AddrMode::AbsY}, //
     {OpeKind::Ldy, AddrMode::AbsX}, //
     {OpeKind::Lda, AddrMode::AbsX}, //
     {OpeKind::Ldx, AddrMode::AbsY}, //
     {OpeKind::Lax, AddrMode::AbsY}, //
     {OpeKind::Cpy, AddrMode::Imm}, //
     {OpeKind::Cmp, AddrMode::IndX}, //
     {OpeKind::Dop, AddrMode::Imm}, //
     {OpeKind::Dcp, AddrMode::IndX}, //
     {OpeKind::Cpy, AddrMode::Zp}, //
     {OpeKind::Cmp, AddrMode::Zp}, //
     {OpeKind::Dec, AddrMode::Zp}, //
     {OpeKind::Dcp, AddrMode::Zp}, //
     {OpeKind::Iny, AddrMode::Impl}, //
     {OpeKind::Cmp, AddrMode::Imm}, //
     {OpeKind::Dex, AddrMode::Impl}, //
     {OpeKind::Axs, AddrMode::Imm}, //
     {OpeKind::Cpy, AddrMode::Abs}, //
     {OpeKind::Cmp, AddrMode::Abs}, //
     {OpeKind::Dec, AddrMode::Abs}, //
     {OpeKind::Dcp, AddrMode::Abs}, //
     {OpeKind::Bne, AddrMode::Rel}, //
     {OpeKind::Cmp, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Dcp, AddrMode::IndY}, //
     {OpeKind::Dop, AddrMode::ZpX}, //
     {OpeKind::Cmp, AddrMode::ZpX}, //
     {OpeKind::Dec, AddrMode::ZpX}, //
     {OpeKind::Dcp, AddrMode::ZpX}, //
     {OpeKind::Cld, AddrMode::Impl}, //
     {OpeKind::Cmp, AddrMode::AbsY}, //
     {OpeKind::Nop, AddrMode::Nop}, //
     {OpeKind::Dcp, AddrMode::AbsY}, //
     {OpeKind::Top, AddrMode::AbsX}, //
     {OpeKind::Cmp, AddrMode::AbsX}, //
     {OpeKind::Dec, AddrMode::AbsX}, //
     {OpeKind::Dcp, AddrMode::AbsX}, //
     {OpeKind::Cpx, AddrMode::Imm}, //
     {OpeKind::Sbc, AddrMode::IndX}, //
     {OpeKind::Dop, AddrMode::Imm}, //
     {OpeKind::Isb, AddrMode::IndX}, //
     {OpeKind::Cpx, AddrMode::Zp}, //
     {OpeKind::Sbc, AddrMode::Zp}, //
     {OpeKind::Inc, AddrMode::Zp}, //
     {OpeKind::Isb, AddrMode::Zp}, //
     {OpeKind::Inx, AddrMode::Impl}, //
     {OpeKind::Sbc, AddrMode::Imm}, //
     {OpeKind::Nop, AddrMode::Impl}, //
     {OpeKind::Sbc, AddrMode::Imm}, //
     {OpeKind::Cpx, AddrMode::Abs}, //
     {OpeKind::Sbc, AddrMode::Abs}, //
     {OpeKind::Inc, AddrMode::Abs}, //
     {OpeKind::Isb, AddrMode::Abs}, //
     {OpeKind::Beq, AddrMode::Rel}, //
     {OpeKind::Sbc, AddrMode::IndY}, //
     {OpeKind::Kil, AddrMode::Impl}, //
     {OpeKind::Isb, AddrMode::IndY}, //
     {OpeKind::Dop, AddrMode::ZpX}, //
     {OpeKind::Sbc, AddrMode::ZpX}, //
     {OpeKind::Inc, AddrMode::ZpX}, //
     {OpeKind::Isb, AddrMode::ZpX}, //
     {OpeKind::Sed, AddrMode::Impl}, //
     {OpeKind::Sbc, AddrMode::AbsY}, //
     {OpeKind::Nop, AddrMode::Nop}, //
     {OpeKind::Isb, AddrMode::AbsY}, //
     {OpeKind::Top, AddrMode::AbsX}, //
     {OpeKind::Sbc, AddrMode::AbsX}, //
     {OpeKind::Inc, AddrMode::AbsX}, //
     {OpeKind::Isb, AddrMode::AbsX} //
    };

    var status            : Status   ;
    var n_status          : Status   ;
    var reference_busy    : logic    ;
    var n_reference_busy  : logic    ;
    var reference_finish  : logic    ;
    var n_reference_finish: logic    ;
    var n_addr_low_reg    : logic <8>;
    var n_addr_high_reg   : logic <8>;
    var addr_low_reg      : logic <8>;
    var addr_high_reg     : logic <8>;

    var raw_addressing_mode      : logic<8>;
    var addressing_mode_rx_busy  : logic   ;
    var addressing_mode_rx_en    : logic   ;
    assign addressing_mode_rx_en     = EN && ~addressing_mode_rx_finish;
    var addressing_mode_rx_finish: logic;
    inst addressing_mode_rx: uarty::Rx (
        CLK                                   ,
        RST                                   ,
        DATA_IN                               ,
        RE         : addressing_mode_rx_en    ,
        read_finish: addressing_mode_rx_finish,
        data_out   : raw_addressing_mode      ,
        busy       : addressing_mode_rx_busy  ,
    );
    var casted_addressing_mode: OperatorsPkg::AddrMode;
    assign casted_addressing_mode = raw_addressing_mode as OperatorsPkg::AddrMode;

    var read_imm_en    : logic   ;
    var n_read_imm_en  : logic   ;
    var read_imm_finish: logic   ;
    var imm_data       : logic<8>;
    var read_imm_busy  : logic   ;
    inst read_imm_rx: uarty::Rx (
        CLK                         ,
        RST                         ,
        DATA_IN                     ,
        RE         : read_imm_en    ,
        read_finish: read_imm_finish,
        data_out   : imm_data       ,
        busy       : read_imm_busy  ,
    );

    assign busy = addressing_mode_rx_busy || reference_busy || read_imm_busy;
    always_comb {
        n_status           = status;
        n_reference_busy   = reference_busy;
        n_reference_finish = reference_finish;
        n_addr_low_reg     = addr_low_reg;
        n_addr_high_reg    = addr_low_reg;
        n_read_imm_en      = read_imm_en;
        if read_imm_finish {
            addr_low           = imm_data;
            addr_high          = 0;
            n_status           = Status::idle;
            n_reference_busy   = 0;
            n_reference_finish = 1;
        } else if reference_finish {
            addr_low  = addr_low_reg;
            addr_high = addr_high_reg;
        } else {
            addr_low  = 0;
            addr_high = 0;
        }
        case status {
            Status::idle: {
                if EN && ~reference_finish && ~read_imm_finish {
                    n_reference_busy = 1;
                    if casted_addressing_mode != OperatorsPkg::AddrMode::Stop {
                        n_status = Status::work;
                    }
                }
            }
            Status::work: {
                if casted_addressing_mode == OperatorsPkg::AddrMode::Acc {
                    n_addr_low_reg     = a;
                    n_addr_high_reg    = 0;
                    n_status           = Status::idle;
                    n_reference_busy   = 0;
                    n_reference_finish = 1;
                } else if casted_addressing_mode == OperatorsPkg::AddrMode::Imm {
                    n_read_imm_en = 1;
                    n_status      = Status::idle;

                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::Abs {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::AbsX {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::AbsY {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::Zp {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::ZpX {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::ZpY {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::Impl {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::Rel {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::IndX {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::IndY {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::Ind {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::AddrMode::Nop {
                    //     //
                } else {
                    n_addr_low_reg  = 0;
                    n_addr_high_reg = 0;
                }
                n_status           = Status::idle;
                n_reference_busy   = 0;
                n_reference_finish = 1;
            }
        }
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            status           = Status::idle;
            reference_finish = 0;
            reference_busy   = 0;
            addr_low_reg     = 0;
            addr_high_reg    = 0;
            read_imm_en      = 0;
        } else {
            status           = n_status;
            reference_finish = n_reference_finish;
            reference_busy   = n_reference_busy;
            addr_low_reg     = n_addr_low_reg;
            addr_high_reg    = n_addr_high_reg;
            read_imm_en      = n_read_imm_en;
        }
    }
}
