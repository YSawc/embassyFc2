module Debug (
    CLK      : input  logic   ,
    RST      : input  logic   ,
    DATA_IN  : input  logic   ,
    EN       : input  logic   ,
    addr_low : output logic<8>,
    addr_high: output logic<8>,
    busy     : output logic   ,
) {
    var a: logic<8> = 8'h01;
    // var x       : logic<8> = 8'h02;
    // var y       : logic<8> = 8'h03;
    // var imm_addr: logic<8> = 8'h04;
    // var ll      : logic<8> = 8'h05;
    // var hh      : logic<8> = 8'h06;

    enum Status: logic<3> {
        idle,
        work,
    }

    var operators: OperatorsPkg::Operator<8'hff>;
    assign operators = { //
    {OperatorsPkg::OpeKind::Brk, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Php, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::Acc}, //
     {OperatorsPkg::OpeKind::Aac, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bpl, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Clc, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Jsr, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Bit, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Plp, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::Acc}, //
     {OperatorsPkg::OpeKind::Aac, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Bit, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bmi, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Sec, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Rti, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Pha, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::Acc}, //
     {OperatorsPkg::OpeKind::Asr, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Jmp, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bvc, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Cli, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Rts, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Pla, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::Acc}, //
     {OperatorsPkg::OpeKind::Arr, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Jmp, OperatorsPkg::AddrMode::Ind}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bvs, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Sei, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Sty, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Stx, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Dey, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Txa, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Xaa, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Sty, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Stx, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bcc, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Axa, OperatorsPkg::AddrMode::ZpY}, //
     {OperatorsPkg::OpeKind::Sty, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Stx, OperatorsPkg::AddrMode::ZpY}, //
     {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::ZpY}, //
     {OperatorsPkg::OpeKind::Tya, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Txs, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Xas, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Sya, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Sxa, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Axa, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Tay, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Tax, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Lxa, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bcs, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::ZpY}, //
     {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::ZpY}, //
     {OperatorsPkg::OpeKind::Clv, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Tsx, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Las, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Cpy, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Cpy, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Iny, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Dex, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Axs, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Cpy, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Bne, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Cld, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Cpx, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::IndX}, //
     {OperatorsPkg::OpeKind::Cpx, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::Zp}, //
     {OperatorsPkg::OpeKind::Inx, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Imm}, //
     {OperatorsPkg::OpeKind::Cpx, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::Abs}, //
     {OperatorsPkg::OpeKind::Beq, OperatorsPkg::AddrMode::Rel}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::IndY}, //
     {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::ZpX}, //
     {OperatorsPkg::OpeKind::Sed, OperatorsPkg::AddrMode::Impl}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::AbsY}, //
     {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::AbsX}, //
     {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::AbsX} //
    };

    var status            : Status   ;
    var n_status          : Status   ;
    var reference_busy    : logic    ;
    var n_reference_busy  : logic    ;
    var reference_finish  : logic    ;
    var n_reference_finish: logic    ;
    var n_addr_low_reg    : logic <8>;
    var n_addr_high_reg   : logic <8>;
    var addr_low_reg      : logic <8>;
    var addr_high_reg     : logic <8>;

    enum OpeMode: logic {
        Inst,
        Addr,
    }
    var raw_operator_mode      : logic<8>;
    var operator_mode_rx_busy  : logic   ;
    var operator_mode_rx_en    : logic   ;
    assign operator_mode_rx_en     = EN && ~operator_mode_rx_finish;
    var operator_mode_rx_finish: logic;
    inst operator_mode_rx: uarty::Rx (
        CLK                                 ,
        RST                                 ,
        DATA_IN                             ,
        RE         : operator_mode_rx_en    ,
        read_finish: operator_mode_rx_finish,
        data_out   : raw_operator_mode      ,
        busy       : operator_mode_rx_busy  ,
    );
    var casted_operator_mode: OpeMode;
    assign casted_operator_mode = raw_operator_mode as OpeMode;

    var raw_addressing_mode      : logic<8>;
    var addressing_mode_rx_busy  : logic   ;
    var addressing_mode_rx_en    : logic   ;
    assign addressing_mode_rx_en     = EN && (casted_operator_mode == OpeMode::Addr) && operator_mode_rx_finish && ~addressing_mode_rx_finish;
    var addressing_mode_rx_finish: logic;
    inst addressing_mode_rx: uarty::Rx (
        CLK                                   ,
        RST                                   ,
        DATA_IN                               ,
        RE         : addressing_mode_rx_en    ,
        read_finish: addressing_mode_rx_finish,
        data_out   : raw_addressing_mode      ,
        busy       : addressing_mode_rx_busy  ,
    );
    var casted_addressing_mode: OperatorsPkg::AddrMode;
    assign casted_addressing_mode = raw_addressing_mode as OperatorsPkg::AddrMode;

    var read_imm_en    : logic   ;
    var n_read_imm_en  : logic   ;
    var read_imm_finish: logic   ;
    var imm_data       : logic<8>;
    var read_imm_busy  : logic   ;
    inst read_imm_rx: uarty::Rx (
        CLK                         ,
        RST                         ,
        DATA_IN                     ,
        RE         : read_imm_en    ,
        read_finish: read_imm_finish,
        data_out   : imm_data       ,
        busy       : read_imm_busy  ,
    );
    var reference_en: logic;
    assign reference_en = EN && addressing_mode_rx_finish && ~reference_finish && ~read_imm_finish;

    assign busy = operator_mode_rx_busy || addressing_mode_rx_busy || reference_busy || read_imm_busy;
    always_comb {
        n_status           = status;
        n_reference_busy   = reference_busy;
        n_reference_finish = reference_finish;
        n_addr_low_reg     = addr_low_reg;
        n_addr_high_reg    = addr_low_reg;
        n_read_imm_en      = read_imm_en;
        if read_imm_finish {
            addr_low           = imm_data;
            addr_high          = 0;
            n_status           = Status::idle;
            n_reference_busy   = 0;
            n_reference_finish = 1;
        } else if reference_finish {
            addr_low  = addr_low_reg;
            addr_high = addr_high_reg;
        } else {
            addr_low  = 0;
            addr_high = 0;
        }
        case status {
            Status::idle: {
                if reference_en {
                    n_reference_busy = 1;
                    n_status         = Status::work;
                }
            }
            Status::work: {
                if casted_addressing_mode == OperatorsPkg::AddrMode::Acc {
                    n_addr_low_reg     = a;
                    n_addr_high_reg    = 0;
                    n_status           = Status::idle;
                    n_reference_busy   = 0;
                    n_reference_finish = 1;
                } else if casted_addressing_mode == OperatorsPkg::AddrMode::Imm {
                    n_read_imm_en = 1;
                    n_status      = Status::idle;
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::Abs {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::AbsX {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::AbsY {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::Zp {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::ZpX {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::ZpY {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::Impl {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::Rel {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::IndX {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::IndY {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::Ind {
                    //     //
                    // } else if casted_addressing_mode == OperatorsPkg::OperatorsPkg::AddrMode::Nop {
                    //     //
                } else {
                    n_addr_low_reg  = 0;
                    n_addr_high_reg = 0;
                }
            }
        }
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            status           = Status::idle;
            reference_finish = 0;
            reference_busy   = 0;
            addr_low_reg     = 0;
            addr_high_reg    = 0;
            read_imm_en      = 0;
        } else {
            status           = n_status;
            reference_finish = n_reference_finish;
            reference_busy   = n_reference_busy;
            addr_low_reg     = n_addr_low_reg;
            addr_high_reg    = n_addr_high_reg;
            read_imm_en      = n_read_imm_en;
        }
    }
}
