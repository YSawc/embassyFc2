module Debug (
    CLK        : input  logic    ,
    RST        : input  logic    ,
    DATA_IN    : input  logic    ,
    EN         : input  logic    ,
    WE         : input  logic    ,
    tx_data_out: output logic    ,
    busy       : output logic    ,
    RTS        : output logic    ,
    finish     : output logic    ,
    a          : output logic<8> ,
    x          : output logic<8> ,
    y          : output logic<8> ,
    pc         : output logic<16>,
) {
    var tmp_a : logic<8> ;
    var tmp_x : logic<8> ;
    var tmp_y : logic<8> ;
    var tmp_pc: logic<16>;

    var n_busy  : logic;
    var n_RTS   : logic;
    var n_finish: logic;

    enum Status: logic {
        idle,
        work,
    }

    var seq_status  : SeqStatus   ;
    var n_seq_status: SeqStatus   ;
    enum SeqStatus: logic    <4> {
        Ready,
        OpeRead,
        TxRegisterDetect,
        RegisterLowTransfer,
        RegisterHighTransfer,
        InstRead,
        AddrRefDetect,
        AddrRefLowRead,
        AddrRefHighRead,
        OpeExecute,
    }

    var operators       : OperatorsPkg::Operator [8'hff];
    assign operators[8'h00] = {OperatorsPkg::OpeKind::Brk, OperatorsPkg::AddrMode::Impl}; // 0x00
    assign operators[8'h01] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::IndX}; // 0x01
    assign operators[8'h02] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x02
    assign operators[8'h03] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::IndX}; // 0x03
    assign operators[8'h04] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Zp}; // 0x04
    assign operators[8'h05] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::Zp}; // 0x05
    assign operators[8'h06] = {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::Zp}; // 0x06
    assign operators[8'h07] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::Zp}; // 0x07
    assign operators[8'h08] = {OperatorsPkg::OpeKind::Php, OperatorsPkg::AddrMode::Impl}; // 0x08
    assign operators[8'h09] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::Imm}; // 0x09
    assign operators[8'h0a] = {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::Acc}; // 0x0a
    assign operators[8'h0b] = {OperatorsPkg::OpeKind::Aac, OperatorsPkg::AddrMode::Imm}; // 0x0b
    assign operators[8'h0c] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::Abs}; // 0x0c
    assign operators[8'h0d] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::Abs}; // 0x0d
    assign operators[8'h0e] = {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::Abs}; // 0x0e
    assign operators[8'h0f] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::Abs}; // 0x0f
    assign operators[8'h10] = {OperatorsPkg::OpeKind::Bpl, OperatorsPkg::AddrMode::Rel}; // 0x10
    assign operators[8'h11] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::IndY}; // 0x11
    assign operators[8'h12] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x12
    assign operators[8'h13] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::IndY}; // 0x13
    assign operators[8'h14] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}; // 0x14
    assign operators[8'h15] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::ZpX}; // 0x15
    assign operators[8'h16] = {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::ZpX}; // 0x16
    assign operators[8'h17] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::ZpX}; // 0x17
    assign operators[8'h18] = {OperatorsPkg::OpeKind::Clc, OperatorsPkg::AddrMode::Impl}; // 0x18
    assign operators[8'h19] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::AbsY}; // 0x19
    assign operators[8'h1a] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}; // 0x1a
    assign operators[8'h1b] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::AbsY}; // 0x1b
    assign operators[8'h1c] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}; // 0x1c
    assign operators[8'h1d] = {OperatorsPkg::OpeKind::Ora, OperatorsPkg::AddrMode::AbsX}; // 0x1d
    assign operators[8'h1e] = {OperatorsPkg::OpeKind::Asl, OperatorsPkg::AddrMode::AbsX}; // 0x1e
    assign operators[8'h1f] = {OperatorsPkg::OpeKind::Slo, OperatorsPkg::AddrMode::AbsX}; // 0x1f
    assign operators[8'h20] = {OperatorsPkg::OpeKind::Jsr, OperatorsPkg::AddrMode::Abs}; // 0x20
    assign operators[8'h21] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::IndX}; // 0x21
    assign operators[8'h22] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x22
    assign operators[8'h23] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::IndX}; // 0x23
    assign operators[8'h24] = {OperatorsPkg::OpeKind::Bit, OperatorsPkg::AddrMode::Zp}; // 0x24
    assign operators[8'h25] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::Zp}; // 0x25
    assign operators[8'h26] = {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::Zp}; // 0x26
    assign operators[8'h27] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::Zp}; // 0x27
    assign operators[8'h28] = {OperatorsPkg::OpeKind::Plp, OperatorsPkg::AddrMode::Impl}; // 0x28
    assign operators[8'h29] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::Imm}; // 0x29
    assign operators[8'h2a] = {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::Acc}; // 0x2a
    assign operators[8'h2b] = {OperatorsPkg::OpeKind::Aac, OperatorsPkg::AddrMode::Imm}; // 0x2b
    assign operators[8'h2c] = {OperatorsPkg::OpeKind::Bit, OperatorsPkg::AddrMode::Abs}; // 0x2c
    assign operators[8'h2d] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::Abs}; // 0x2d
    assign operators[8'h2e] = {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::Abs}; // 0x2e
    assign operators[8'h2f] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::Abs}; // 0x2f
    assign operators[8'h30] = {OperatorsPkg::OpeKind::Bmi, OperatorsPkg::AddrMode::Rel}; // 0x30
    assign operators[8'h31] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::IndY}; // 0x31
    assign operators[8'h32] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x32
    assign operators[8'h33] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::IndY}; // 0x33
    assign operators[8'h34] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}; // 0x34
    assign operators[8'h35] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::ZpX}; // 0x35
    assign operators[8'h36] = {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::ZpX}; // 0x36
    assign operators[8'h37] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::ZpX}; // 0x37
    assign operators[8'h38] = {OperatorsPkg::OpeKind::Sec, OperatorsPkg::AddrMode::Impl}; // 0x38
    assign operators[8'h39] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::AbsY}; // 0x39
    assign operators[8'h3a] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}; // 0x3a
    assign operators[8'h3b] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::AbsY}; // 0x3b
    assign operators[8'h3c] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}; // 0x3c
    assign operators[8'h3d] = {OperatorsPkg::OpeKind::And, OperatorsPkg::AddrMode::AbsX}; // 0x3d
    assign operators[8'h3e] = {OperatorsPkg::OpeKind::Rol, OperatorsPkg::AddrMode::AbsX}; // 0x3e
    assign operators[8'h3f] = {OperatorsPkg::OpeKind::Rla, OperatorsPkg::AddrMode::AbsX}; // 0x3f
    assign operators[8'h40] = {OperatorsPkg::OpeKind::Rti, OperatorsPkg::AddrMode::Impl}; // 0x40
    assign operators[8'h41] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::IndX}; // 0x41
    assign operators[8'h42] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x42
    assign operators[8'h43] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::IndX}; // 0x43
    assign operators[8'h44] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Zp}; // 0x44
    assign operators[8'h45] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::Zp}; // 0x45
    assign operators[8'h46] = {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::Zp}; // 0x46
    assign operators[8'h47] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::Zp}; // 0x47
    assign operators[8'h48] = {OperatorsPkg::OpeKind::Pha, OperatorsPkg::AddrMode::Impl}; // 0x48
    assign operators[8'h49] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::Imm}; // 0x49
    assign operators[8'h4a] = {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::Acc}; // 0x4a
    assign operators[8'h4b] = {OperatorsPkg::OpeKind::Asr, OperatorsPkg::AddrMode::Imm}; // 0x4b
    assign operators[8'h4c] = {OperatorsPkg::OpeKind::Jmp, OperatorsPkg::AddrMode::Abs}; // 0x4c
    assign operators[8'h4d] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::Abs}; // 0x4d
    assign operators[8'h4e] = {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::Abs}; // 0x4e
    assign operators[8'h4f] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::Abs}; // 0x4f
    assign operators[8'h50] = {OperatorsPkg::OpeKind::Bvc, OperatorsPkg::AddrMode::Rel}; // 0x50
    assign operators[8'h51] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::IndY}; // 0x51
    assign operators[8'h52] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x52
    assign operators[8'h53] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::IndY}; // 0x53
    assign operators[8'h54] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}; // 0x54
    assign operators[8'h55] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::ZpX}; // 0x55
    assign operators[8'h56] = {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::ZpX}; // 0x56
    assign operators[8'h57] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::ZpX}; // 0x57
    assign operators[8'h58] = {OperatorsPkg::OpeKind::Cli, OperatorsPkg::AddrMode::Impl}; // 0x58
    assign operators[8'h59] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::AbsY}; // 0x59
    assign operators[8'h5a] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}; // 0x5a
    assign operators[8'h5b] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::AbsY}; // 0x5b
    assign operators[8'h5c] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}; // 0x5c
    assign operators[8'h5d] = {OperatorsPkg::OpeKind::Eor, OperatorsPkg::AddrMode::AbsX}; // 0x5d
    assign operators[8'h5e] = {OperatorsPkg::OpeKind::Lsr, OperatorsPkg::AddrMode::AbsX}; // 0x5e
    assign operators[8'h5f] = {OperatorsPkg::OpeKind::Sre, OperatorsPkg::AddrMode::AbsX}; // 0x5f
    assign operators[8'h60] = {OperatorsPkg::OpeKind::Rts, OperatorsPkg::AddrMode::Impl}; // 0x60
    assign operators[8'h61] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::IndX}; // 0x61
    assign operators[8'h62] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x62
    assign operators[8'h63] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::IndX}; // 0x63
    assign operators[8'h64] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Zp}; // 0x64
    assign operators[8'h65] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::Zp}; // 0x65
    assign operators[8'h66] = {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::Zp}; // 0x66
    assign operators[8'h67] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::Zp}; // 0x67
    assign operators[8'h68] = {OperatorsPkg::OpeKind::Pla, OperatorsPkg::AddrMode::Impl}; // 0x68
    assign operators[8'h69] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::Imm}; // 0x69
    assign operators[8'h6a] = {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::Acc}; // 0x6a
    assign operators[8'h6b] = {OperatorsPkg::OpeKind::Arr, OperatorsPkg::AddrMode::Imm}; // 0x6b
    assign operators[8'h6c] = {OperatorsPkg::OpeKind::Jmp, OperatorsPkg::AddrMode::Ind}; // 0x6c
    assign operators[8'h6d] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::Abs}; // 0x6d
    assign operators[8'h6e] = {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::Abs}; // 0x6e
    assign operators[8'h6f] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::Abs}; // 0x6f
    assign operators[8'h70] = {OperatorsPkg::OpeKind::Bvs, OperatorsPkg::AddrMode::Rel}; // 0x70
    assign operators[8'h71] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::IndY}; // 0x71
    assign operators[8'h72] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x72
    assign operators[8'h73] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::IndY}; // 0x73
    assign operators[8'h74] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}; // 0x74
    assign operators[8'h75] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::ZpX}; // 0x75
    assign operators[8'h76] = {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::ZpX}; // 0x76
    assign operators[8'h77] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::ZpX}; // 0x77
    assign operators[8'h78] = {OperatorsPkg::OpeKind::Sei, OperatorsPkg::AddrMode::Impl}; // 0x78
    assign operators[8'h79] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::AbsY}; // 0x79
    assign operators[8'h7a] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}; // 0x7a
    assign operators[8'h7b] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::AbsY}; // 0x7b
    assign operators[8'h7c] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}; // 0x7c
    assign operators[8'h7d] = {OperatorsPkg::OpeKind::Adc, OperatorsPkg::AddrMode::AbsX}; // 0x7d
    assign operators[8'h7e] = {OperatorsPkg::OpeKind::Ror, OperatorsPkg::AddrMode::AbsX}; // 0x7e
    assign operators[8'h7f] = {OperatorsPkg::OpeKind::Rra, OperatorsPkg::AddrMode::AbsX}; // 0x7f
    assign operators[8'h80] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}; // 0x80
    assign operators[8'h81] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::IndX}; // 0x81
    assign operators[8'h82] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}; // 0x82
    assign operators[8'h83] = {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::IndX}; // 0x83
    assign operators[8'h84] = {OperatorsPkg::OpeKind::Sty, OperatorsPkg::AddrMode::Zp}; // 0x84
    assign operators[8'h85] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::Zp}; // 0x85
    assign operators[8'h86] = {OperatorsPkg::OpeKind::Stx, OperatorsPkg::AddrMode::Zp}; // 0x86
    assign operators[8'h87] = {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::Zp}; // 0x87
    assign operators[8'h88] = {OperatorsPkg::OpeKind::Dey, OperatorsPkg::AddrMode::Impl}; // 0x88
    assign operators[8'h89] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}; // 0x89
    assign operators[8'h8a] = {OperatorsPkg::OpeKind::Txa, OperatorsPkg::AddrMode::Impl}; // 0x8a
    assign operators[8'h8b] = {OperatorsPkg::OpeKind::Xaa, OperatorsPkg::AddrMode::Imm}; // 0x8b
    assign operators[8'h8c] = {OperatorsPkg::OpeKind::Sty, OperatorsPkg::AddrMode::Abs}; // 0x8c
    assign operators[8'h8d] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::Abs}; // 0x8d
    assign operators[8'h8e] = {OperatorsPkg::OpeKind::Stx, OperatorsPkg::AddrMode::Abs}; // 0x8e
    assign operators[8'h8f] = {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::Abs}; // 0x8f
    assign operators[8'h90] = {OperatorsPkg::OpeKind::Bcc, OperatorsPkg::AddrMode::Rel}; // 0x90
    assign operators[8'h91] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::IndY}; // 0x91
    assign operators[8'h92] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0x92
    assign operators[8'h93] = {OperatorsPkg::OpeKind::Axa, OperatorsPkg::AddrMode::ZpY}; // 0x93
    assign operators[8'h94] = {OperatorsPkg::OpeKind::Sty, OperatorsPkg::AddrMode::ZpX}; // 0x94
    assign operators[8'h95] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::ZpX}; // 0x95
    assign operators[8'h96] = {OperatorsPkg::OpeKind::Stx, OperatorsPkg::AddrMode::ZpY}; // 0x96
    assign operators[8'h97] = {OperatorsPkg::OpeKind::Sax, OperatorsPkg::AddrMode::ZpY}; // 0x97
    assign operators[8'h98] = {OperatorsPkg::OpeKind::Tya, OperatorsPkg::AddrMode::Impl}; // 0x98
    assign operators[8'h99] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::AbsY}; // 0x99
    assign operators[8'h9a] = {OperatorsPkg::OpeKind::Txs, OperatorsPkg::AddrMode::Impl}; // 0x9a
    assign operators[8'h9b] = {OperatorsPkg::OpeKind::Xas, OperatorsPkg::AddrMode::AbsY}; // 0x9b
    assign operators[8'h9c] = {OperatorsPkg::OpeKind::Sya, OperatorsPkg::AddrMode::AbsX}; // 0x9c
    assign operators[8'h9d] = {OperatorsPkg::OpeKind::Sta, OperatorsPkg::AddrMode::AbsX}; // 0x9d
    assign operators[8'h9e] = {OperatorsPkg::OpeKind::Sxa, OperatorsPkg::AddrMode::AbsX}; // 0x9e
    assign operators[8'h9f] = {OperatorsPkg::OpeKind::Axa, OperatorsPkg::AddrMode::AbsY}; // 0x9f
    assign operators[8'ha0] = {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::Imm}; // 0xa0
    assign operators[8'ha1] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::IndX}; // 0xa1
    assign operators[8'ha2] = {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::Imm}; // 0xa2
    assign operators[8'ha3] = {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::IndX}; // 0xa3
    assign operators[8'ha4] = {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::Zp}; // 0xa4
    assign operators[8'ha5] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::Zp}; // 0xa5
    assign operators[8'ha6] = {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::Zp}; // 0xa6
    assign operators[8'ha7] = {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::Zp}; // 0xa7
    assign operators[8'ha8] = {OperatorsPkg::OpeKind::Tay, OperatorsPkg::AddrMode::Impl}; // 0xa8
    assign operators[8'ha9] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::Imm}; // 0xa9
    assign operators[8'haa] = {OperatorsPkg::OpeKind::Tax, OperatorsPkg::AddrMode::Impl}; // 0xaa
    assign operators[8'hab] = {OperatorsPkg::OpeKind::Lxa, OperatorsPkg::AddrMode::Imm}; // 0xab
    assign operators[8'hac] = {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::Abs}; // 0xac
    assign operators[8'had] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::Abs}; // 0xad
    assign operators[8'hae] = {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::Abs}; // 0xae
    assign operators[8'haf] = {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::Abs}; // 0xaf
    assign operators[8'hb0] = {OperatorsPkg::OpeKind::Bcs, OperatorsPkg::AddrMode::Rel}; // 0xb0
    assign operators[8'hb1] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::IndY}; // 0xb1
    assign operators[8'hb2] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0xb2
    assign operators[8'hb3] = {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::IndY}; // 0xb3
    assign operators[8'hb4] = {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::ZpX}; // 0xb4
    assign operators[8'hb5] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::ZpX}; // 0xb5
    assign operators[8'hb6] = {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::ZpY}; // 0xb6
    assign operators[8'hb7] = {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::ZpY}; // 0xb7
    assign operators[8'hb8] = {OperatorsPkg::OpeKind::Clv, OperatorsPkg::AddrMode::Impl}; // 0xb8
    assign operators[8'hb9] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::AbsY}; // 0xb9
    assign operators[8'hba] = {OperatorsPkg::OpeKind::Tsx, OperatorsPkg::AddrMode::Impl}; // 0xba
    assign operators[8'hbb] = {OperatorsPkg::OpeKind::Las, OperatorsPkg::AddrMode::AbsY}; // 0xbb
    assign operators[8'hbc] = {OperatorsPkg::OpeKind::Ldy, OperatorsPkg::AddrMode::AbsX}; // 0xbc
    assign operators[8'hbd] = {OperatorsPkg::OpeKind::Lda, OperatorsPkg::AddrMode::AbsX}; // 0xbd
    assign operators[8'hbe] = {OperatorsPkg::OpeKind::Ldx, OperatorsPkg::AddrMode::AbsY}; // 0xbe
    assign operators[8'hbf] = {OperatorsPkg::OpeKind::Lax, OperatorsPkg::AddrMode::AbsY}; // 0xbf
    assign operators[8'hc0] = {OperatorsPkg::OpeKind::Cpy, OperatorsPkg::AddrMode::Imm}; // 0xc0
    assign operators[8'hc1] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::IndX}; // 0xc1
    assign operators[8'hc2] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}; // 0xc2
    assign operators[8'hc3] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::IndX}; // 0xc3
    assign operators[8'hc4] = {OperatorsPkg::OpeKind::Cpy, OperatorsPkg::AddrMode::Zp}; // 0xc4
    assign operators[8'hc5] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::Zp}; // 0xc5
    assign operators[8'hc6] = {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::Zp}; // 0xc6
    assign operators[8'hc7] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::Zp}; // 0xc7
    assign operators[8'hc8] = {OperatorsPkg::OpeKind::Iny, OperatorsPkg::AddrMode::Impl}; // 0xc8
    assign operators[8'hc9] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::Imm}; // 0xc9
    assign operators[8'hca] = {OperatorsPkg::OpeKind::Dex, OperatorsPkg::AddrMode::Impl}; // 0xca
    assign operators[8'hcb] = {OperatorsPkg::OpeKind::Axs, OperatorsPkg::AddrMode::Imm}; // 0xcb
    assign operators[8'hcc] = {OperatorsPkg::OpeKind::Cpy, OperatorsPkg::AddrMode::Abs}; // 0xcc
    assign operators[8'hcd] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::Abs}; // 0xcd
    assign operators[8'hce] = {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::Abs}; // 0xce
    assign operators[8'hcf] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::Abs}; // 0xcf
    assign operators[8'hd0] = {OperatorsPkg::OpeKind::Bne, OperatorsPkg::AddrMode::Rel}; // 0xd0
    assign operators[8'hd1] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::IndY}; // 0xd1
    assign operators[8'hd2] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0xd2
    assign operators[8'hd3] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::IndY}; // 0xd3
    assign operators[8'hd4] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}; // 0xd4
    assign operators[8'hd5] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::ZpX}; // 0xd5
    assign operators[8'hd6] = {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::ZpX}; // 0xd6
    assign operators[8'hd7] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::ZpX}; // 0xd7
    assign operators[8'hd8] = {OperatorsPkg::OpeKind::Cld, OperatorsPkg::AddrMode::Impl}; // 0xd8
    assign operators[8'hd9] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::AbsY}; // 0xd9
    assign operators[8'hda] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}; // 0xda
    assign operators[8'hdb] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::AbsY}; // 0xdb
    assign operators[8'hdc] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}; // 0xdc
    assign operators[8'hdd] = {OperatorsPkg::OpeKind::Cmp, OperatorsPkg::AddrMode::AbsX}; // 0xdd
    assign operators[8'hde] = {OperatorsPkg::OpeKind::Dec, OperatorsPkg::AddrMode::AbsX}; // 0xde
    assign operators[8'hdf] = {OperatorsPkg::OpeKind::Dcp, OperatorsPkg::AddrMode::AbsX}; // 0xdf
    assign operators[8'he0] = {OperatorsPkg::OpeKind::Cpx, OperatorsPkg::AddrMode::Imm}; // 0xe0
    assign operators[8'he1] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::IndX}; // 0xe1
    assign operators[8'he2] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::Imm}; // 0xe2
    assign operators[8'he3] = {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::IndX}; // 0xe3
    assign operators[8'he4] = {OperatorsPkg::OpeKind::Cpx, OperatorsPkg::AddrMode::Zp}; // 0xe4
    assign operators[8'he5] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Zp}; // 0xe5
    assign operators[8'he6] = {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::Zp}; // 0xe6
    assign operators[8'he7] = {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::Zp}; // 0xe7
    assign operators[8'he8] = {OperatorsPkg::OpeKind::Inx, OperatorsPkg::AddrMode::Impl}; // 0xe8
    assign operators[8'he9] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Imm}; // 0xe9
    assign operators[8'hea] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Impl}; // 0xea
    assign operators[8'heb] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Imm}; // 0xeb
    assign operators[8'hec] = {OperatorsPkg::OpeKind::Cpx, OperatorsPkg::AddrMode::Abs}; // 0xec
    assign operators[8'hed] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::Abs}; // 0xed
    assign operators[8'hee] = {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::Abs}; // 0xee
    assign operators[8'hef] = {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::Abs}; // 0xef
    assign operators[8'hf0] = {OperatorsPkg::OpeKind::Beq, OperatorsPkg::AddrMode::Rel}; // 0xf0
    assign operators[8'hf1] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::IndY}; // 0xf1
    assign operators[8'hf2] = {OperatorsPkg::OpeKind::Kil, OperatorsPkg::AddrMode::Impl}; // 0xf2
    assign operators[8'hf3] = {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::IndY}; // 0xf3
    assign operators[8'hf4] = {OperatorsPkg::OpeKind::Dop, OperatorsPkg::AddrMode::ZpX}; // 0xf4
    assign operators[8'hf5] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::ZpX}; // 0xf5
    assign operators[8'hf6] = {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::ZpX}; // 0xf6
    assign operators[8'hf7] = {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::ZpX}; // 0xf7
    assign operators[8'hf8] = {OperatorsPkg::OpeKind::Sed, OperatorsPkg::AddrMode::Impl}; // 0xf8
    assign operators[8'hf9] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::AbsY}; // 0xf9
    assign operators[8'hfa] = {OperatorsPkg::OpeKind::Nop, OperatorsPkg::AddrMode::Nop}; // 0xfa
    assign operators[8'hfb] = {OperatorsPkg::OpeKind::Isb, OperatorsPkg::AddrMode::AbsY}; // 0xfb
    assign operators[8'hfc] = {OperatorsPkg::OpeKind::Top, OperatorsPkg::AddrMode::AbsX}; // 0xfc
    assign operators[8'hfd] = {OperatorsPkg::OpeKind::Sbc, OperatorsPkg::AddrMode::AbsX}; // 0xfd
    assign operators[8'hfe] = {OperatorsPkg::OpeKind::Inc, OperatorsPkg::AddrMode::AbsX}; // 0xfe
    enum OpeMode: logic {
        Inst,
        RegisterTransfer,
    }
    var raw_operator_mode: logic<8>;
    var ope_read_busy    : logic   ;
    var ope_read_en      : logic   ;
    assign ope_read_en       = seq_status == SeqStatus::OpeRead;
    var ope_mode_finish  : logic;
    inst ope_mode_rx: uarty::Rx (
        CLK                        ,
        RST                        ,
        DATA_IN                    ,
        RE      : ope_read_en      ,
        data_out: raw_operator_mode,
        busy    : ope_read_busy    ,
        finish  : ope_mode_finish  ,
    );
    var casted_ope_mode: OpeMode;
    assign casted_ope_mode = raw_operator_mode as OpeMode;

    var tx_reg_detect_rx_en      : logic    = seq_status == SeqStatus::TxRegisterDetect;
    var tx_reg_detect_rx_data_out: logic<8>;
    var tx_reg_detect_rx_busy    : logic   ;
    var tx_reg_detect_rx_finish  : logic   ;
    inst tx_reg_detect_rx: uarty::Rx (
        CLK                                ,
        RST                                ,
        DATA_IN                            ,
        RE      : tx_reg_detect_rx_en      ,
        data_out: tx_reg_detect_rx_data_out,
        busy    : tx_reg_detect_rx_busy    ,
        finish  : tx_reg_detect_rx_finish  ,
    );
    enum TxReg: logic<2> {
        A,
        X,
        Y,
        PC,
    }
    var casted_tx_reg : TxReg = tx_reg_detect_rx_data_out as TxReg;
    var tmp_high_tx_en: logic = casted_tx_reg == TxReg::PC;

    var register_row_tx_en     : logic    = WE && seq_status == SeqStatus::RegisterLowTransfer;
    var register_row_tx_data_in: logic<8> = if casted_tx_reg == TxReg::A {
        a
    } else if casted_tx_reg == TxReg::X {
        x
    } else if casted_tx_reg == TxReg::Y {
        y
    } else if casted_tx_reg == TxReg::PC {
        pc & 8'hff
    } else {
        0
    };
    var register_row_tx_data_out: logic;
    var register_row_tx_busy    : logic;
    var register_row_tx_finish  : logic;
    inst register_row_tx: uarty::Tx (
        CLK                               ,
        RST                               ,
        WE      : register_row_tx_en      ,
        DATA_IN : register_row_tx_data_in ,
        data_out: register_row_tx_data_out,
        busy    : register_row_tx_busy    ,
        finish  : register_row_tx_finish  ,
    );

    var register_high_tx_en     : logic    = WE && seq_status == SeqStatus::RegisterHighTransfer;
    var register_high_tx_data_in: logic<8> = if casted_tx_reg == TxReg::PC {
        (pc & 16'hff00) >> 8
    } else {
        0
    };
    var register_high_tx_data_out: logic;
    var register_high_tx_busy    : logic;
    var register_high_tx_finish  : logic;
    inst register_high_tx: uarty::Tx (
        CLK                                ,
        RST                                ,
        WE      : register_high_tx_en      ,
        DATA_IN : register_high_tx_data_in ,
        data_out: register_high_tx_data_out,
        busy    : register_high_tx_busy    ,
        finish  : register_high_tx_finish  ,
    );

    var raw_inst_mode   : logic<8>;
    var inst_read_busy  : logic   ;
    var inst_read_en    : logic   ;
    assign inst_read_en     = seq_status == SeqStatus::InstRead;
    var inst_read_finish: logic;
    inst inst_mode_rx: uarty::Rx (
        CLK                       ,
        RST                       ,
        DATA_IN                   ,
        RE      : inst_read_en    ,
        data_out: raw_inst_mode   ,
        busy    : inst_read_busy  ,
        finish  : inst_read_finish,
    );
    var inst_casted_ope_kind : OperatorsPkg::OpeKind  = operators[raw_inst_mode].ope_kind;
    var inst_casted_addr_mode: OperatorsPkg::AddrMode = operators[raw_inst_mode].addr_mode;

    var addr_ref_detector_en    : logic = seq_status == SeqStatus::AddrRefDetect;
    var addr_ref_detector_busy  : logic;
    var addr_ref_detector_finish: logic;
    var tmp_low_rx_en           : logic;
    var tmp_high_rx_en          : logic;
    inst addr_ref_detector: AddrRefDetector (
        CLK                                 ,
        RST                                 ,
        EN        : addr_ref_detector_en    ,
        addr_mode : inst_casted_addr_mode   ,
        low_rx_en : tmp_low_rx_en           ,
        high_rx_en: tmp_high_rx_en          ,
        busy      : addr_ref_detector_busy  ,
        finish    : addr_ref_detector_finish,
    );
    var addr_ref_low_rx_en      : logic    = seq_status == SeqStatus::AddrRefLowRead;
    var addr_ref_low_rx_data_out: logic<8>;
    var addr_ref_low_rx_busy    : logic   ;
    var addr_ref_low_rx_finish  : logic   ;
    inst addr_ref_low_rx: uarty::Rx (
        CLK                               ,
        RST                               ,
        DATA_IN                           ,
        RE      : addr_ref_low_rx_en      ,
        data_out: addr_ref_low_rx_data_out,
        busy    : addr_ref_low_rx_busy    ,
        finish  : addr_ref_low_rx_finish  ,
    );
    var addr_ref_high_rx_en          : logic    = seq_status == SeqStatus::AddrRefHighRead;
    var addr_ref_high_rx_data_out    : logic<8>;
    var tmp_addr_ref_high_rx_data_out: logic<8>;
    var addr_ref_high_rx_busy        : logic   ;
    var addr_ref_high_rx_finish      : logic   ;
    inst addr_ref_high_rx: uarty::Rx (
        CLK                                ,
        RST                                ,
        DATA_IN                            ,
        RE      : addr_ref_high_rx_en      ,
        data_out: addr_ref_high_rx_data_out,
        busy    : addr_ref_high_rx_busy    ,
        finish  : addr_ref_high_rx_finish  ,
    );

    var ope_inst_busy  : logic;
    var ope_inst_finish: logic;
    var ope_inst_en    : logic;
    assign ope_inst_en     = seq_status == SeqStatus::OpeExecute;
    inst ope_inst: OpeInst (
        CLK                                 ,
        RST                                 ,
        EN       : ope_inst_en              ,
        ope_kind : inst_casted_ope_kind     ,
        addr_low : addr_ref_low_rx_data_out ,
        addr_high: addr_ref_high_rx_data_out,
        a        : tmp_a                    ,
        x        : tmp_x                    ,
        y        : tmp_y                    ,
        pc       : tmp_pc                   ,
        busy     : ope_inst_busy            ,
        finish   : ope_inst_finish          ,
    );

    assign n_finish                   = ope_inst_finish;
    var n_register_transfer_finish: logic;
    var register_transfer_finish  : logic;
    assign n_busy                     = if casted_ope_mode == OpeMode::Inst {
        ~ope_inst_finish
    } else if casted_ope_mode == OpeMode::RegisterTransfer {
        ~register_transfer_finish
    } else {
        1
    };

    assign n_RTS = if ope_read_en {
        ~ope_read_en
    } else if inst_read_en {
        ~inst_read_en
    } else if addr_ref_low_rx_en {
        ~addr_ref_low_rx_en
    } else if addr_ref_high_rx_en {
        ~addr_ref_high_rx_en
    } else if tx_reg_detect_rx_en {
        ~tx_reg_detect_rx_en
    } else {
        1
    };

    always_comb {
        n_seq_status               = seq_status;
        n_register_transfer_finish = register_transfer_finish;
        if EN {
            if seq_status == SeqStatus::Ready {
                n_register_transfer_finish = 0;
                n_seq_status               = SeqStatus::OpeRead;
            } else if seq_status == SeqStatus::OpeRead {
                if ope_mode_finish {
                    if casted_ope_mode == OpeMode::Inst {
                        n_seq_status = SeqStatus::InstRead;
                    } else if casted_ope_mode == OpeMode::RegisterTransfer {
                        n_seq_status = SeqStatus::TxRegisterDetect;
                    }
                }
            } else if seq_status == SeqStatus::TxRegisterDetect {
                if tx_reg_detect_rx_finish {
                    n_seq_status = SeqStatus::RegisterLowTransfer;
                }
            } else if seq_status == SeqStatus::RegisterLowTransfer {
                if register_row_tx_finish {
                    if tmp_high_tx_en {
                        n_seq_status = SeqStatus::RegisterHighTransfer;
                    } else {
                        n_register_transfer_finish = 1;
                        n_seq_status               = SeqStatus::Ready;
                    }
                }
            } else if seq_status == SeqStatus::RegisterHighTransfer {
                if register_high_tx_finish {
                    n_register_transfer_finish = 1;
                    n_seq_status               = SeqStatus::Ready;
                }
            } else if seq_status == SeqStatus::InstRead {
                if inst_read_finish {
                    n_seq_status = SeqStatus::AddrRefDetect;
                }
            } else if seq_status == SeqStatus::AddrRefDetect {
                if addr_ref_detector_finish {
                    if tmp_low_rx_en {
                        n_seq_status = SeqStatus::AddrRefLowRead;
                    } else {
                        n_seq_status = SeqStatus::OpeExecute;
                    }
                }
            } else if seq_status == SeqStatus::AddrRefLowRead {
                if addr_ref_low_rx_finish {
                    if tmp_high_rx_en {
                        n_seq_status = SeqStatus::AddrRefHighRead;
                    } else {
                        n_seq_status = SeqStatus::OpeExecute;
                    }
                }
            } else if seq_status == SeqStatus::AddrRefHighRead {
                if addr_ref_high_rx_finish {
                    tmp_addr_ref_high_rx_data_out = addr_ref_high_rx_data_out;
                    n_seq_status                  = SeqStatus::OpeExecute;
                }
            } else if seq_status == SeqStatus::OpeExecute {
                if ope_inst_finish {
                    n_seq_status = SeqStatus::Ready;
                }
            } else {
                n_seq_status = SeqStatus::Ready;
            }
        }
    }

    assign tx_data_out = if register_row_tx_en {
        register_row_tx_data_out
    } else if register_high_tx_en {
        register_high_tx_data_out
    } else {
        1
    };

    assign a  = tmp_a;
    assign x  = tmp_x;
    assign y  = tmp_y;
    assign pc = tmp_pc;
    always_ff (posedge CLK, async_high RST) {
        if_reset {
            busy       = 0;
            RTS        = 1;
            seq_status = SeqStatus::Ready;
            finish     = 0;
        } else {
            busy       = n_busy;
            RTS        = n_RTS;
            seq_status = n_seq_status;
            finish     = n_finish;
        }
    }
}
