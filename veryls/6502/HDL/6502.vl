module main (
    CLK     : input  logic   ,
    RST     : input  logic   ,
    KEY     : input  logic<3>,
    GPIO_0_0: output logic   ,
    GPIO_0_1: input  logic   ,
) {
    var mode: ModePkg::Mode;
    inst modeHandler: ModeHandler (
        CLK              ,
        RST              ,
        DATA_IN: GPIO_0_1,
        mode             ,
    );

    var callback_read_enable : logic<8> = mode == ModePkg::Mode::callback && ~write_busy;
    var callback_return_value: int     ;
    var callback_read_rx_busy: int     ;
    inst callback_read_rx: uarty::Rx (
        CLK                               ,
        RST                               ,
        DATA_IN    : GPIO_0_1             ,
        RE         : callback_read_enable ,
        read_finish: 0                    ,
        data_out   : callback_return_value,
        busy       : callback_read_rx_busy,
    );

    var sequence_count_read_rx_enable: logic    = mode == ModePkg::Mode::sequence && ~write_busy;
    var sequence_args_count          : logic<8>;
    var sequence_count_read_rx_busy  : logic   ;
    inst sequence_count_read_rx: uarty::Rx (
        CLK                                       ,
        RST                                       ,
        DATA_IN    : GPIO_0_1                     ,
        RE         : sequence_count_read_rx_enable,
        read_finish: 0                            ,
        data_out   : sequence_args_count          ,
        busy       : sequence_count_read_rx_busy  ,
    );

    var debug_enable: logic    = mode == ModePkg::Mode::debug && ~write_busy;
    var debug_busy  : logic   ;
    var addr_low    : logic<8>;
    var addr_high   : logic<8>;
    inst debug: Debug (
        CLK                    ,
        RST                    ,
        DATA_IN  : GPIO_0_1    ,
        EN       : debug_enable,
        addr_low               ,
        addr_high              ,
        busy     : debug_busy  ,
    );

    var write_data: logic<8>;
    assign write_data = if mode == ModePkg::Mode::callback {
        callback_return_value
    } else if mode == ModePkg::Mode::debug {
        addr_low
    } else {
        7'b0011010
    };
    var cpu_enable: logic = mode != ModePkg::Mode::nop;

    var target_addr   : logic<16> = 16'h5;
    var target_section: logic<16>;
    assign target_section = CpuMemoryMapPkg::targetSection(target_addr);

    var write_enable: logic;
    assign write_enable = cpu_enable && ~callback_read_rx_busy && ~sequence_count_read_rx_busy && ~debug_busy;
    var write_busy  : logic;
    inst tx: uarty::Tx (
        CLK                   ,
        RST                   ,
        WE      : write_enable,
        DATA_IN : write_data  ,
        data_out: GPIO_0_0    ,
        busy    : write_busy  ,
    );
}
