module main (
    CLK     : input  logic   ,
    RST     : input  logic   ,
    KEY     : input  logic<3>,
    GPIO_0_0: output logic   ,
    GPIO_0_1: input  logic   ,
) {
    var mode: ModePkg::CpuMode;
    inst modeHandler: ModeHandler (
        CLK              ,
        RST              ,
        DATA_IN: GPIO_0_1,
        mode             ,
    );

    var callback_read_enable : logic<8> = (mode == ModePkg::CpuMode::callback) && ~callback_tx_busy;
    var callback_return_value: int     ;
    var callback_read_rx_busy: int     ;
    inst callback_read_rx: uarty::Rx (
        CLK                            ,
        RST                            ,
        DATA_IN : GPIO_0_1             ,
        RE      : callback_read_enable ,
        data_out: callback_return_value,
        busy    : callback_read_rx_busy,
        finish  : 0                    ,
    );
    var callback_tx_enable: logic = (mode == ModePkg::CpuMode::callback) && ~callback_read_rx_busy;
    var callback_tx_out   : logic;
    var callback_tx_busy  : logic;
    var callback_tx_finish: logic;
    inst callback_tx: uarty::Tx (
        CLK                            ,
        RST                            ,
        WE      : callback_tx_enable   ,
        DATA_IN : callback_return_value,
        data_out: callback_tx_out      ,
        busy    : callback_tx_busy     ,
        finish  : callback_tx_finish   ,
    );

    var sequence_count_read_rx_enable: logic    = mode == ModePkg::CpuMode::sequence && ~write_busy;
    var sequence_args_count          : logic<8>;
    var sequence_count_read_rx_busy  : logic   ;
    inst sequence_count_read_rx: uarty::Rx (
        CLK                                    ,
        RST                                    ,
        DATA_IN : GPIO_0_1                     ,
        RE      : sequence_count_read_rx_enable,
        data_out: sequence_args_count          ,
        busy    : sequence_count_read_rx_busy  ,
        finish  : 0                            ,
    );

    var debug_enable    : logic    = (mode == ModePkg::CpuMode::debug) && ~write_busy;
    var debug_busy      : logic   ;
    var addr_low        : logic<8>;
    var addr_high       : logic<8>;
    var debug_tx_en     : logic   ;
    var memory_addr_low : logic<8>;
    var memory_addr_high: logic<8>;
    var memory_data     : logic<8>;
    inst debug: Debug (
        CLK                                      ,
        RST                                      ,
        DATA_IN           : GPIO_0_1             ,
        EN                : debug_enable         ,
        memory_data                              ,
        memory_read_finish: memory_data_rx_finish,
        tx_finish                                ,
        addr_low                                 ,
        addr_high                                ,
        busy              : debug_busy           ,
        WE                : debug_tx_en          ,
        memory_addr_low                          ,
        memory_addr_high                         ,
    );

    var addr_low_tx_out   : logic;
    var addr_low_tx_busy  : logic;
    var addr_low_tx_finish: logic;
    var addr_low_tx_enable: logic = if ~debug_busy && ~addr_low_tx_finish {
        1
    } else {
        0
    };
    inst addr_low_tx: uarty::Tx (
        CLK                         ,
        RST                         ,
        WE      : addr_low_tx_enable,
        DATA_IN : addr_low          ,
        data_out: addr_low_tx_out   ,
        busy    : addr_low_tx_busy  ,
        finish  : addr_low_tx_finish,
    );

    var addr_high_tx_out   : logic;
    var addr_high_tx_busy  : logic;
    var addr_high_tx_finish: logic;
    var addr_high_tx_enable: logic = if ~debug_busy && addr_low_tx_finish {
        1
    } else {
        0
    };
    inst addr_high_tx: uarty::Tx (
        CLK                          ,
        RST                          ,
        WE      : addr_high_tx_enable,
        DATA_IN : addr_high          ,
        data_out: addr_high_tx_out   ,
        busy    : addr_high_tx_busy  ,
        finish  : addr_high_tx_finish,
    );

    var memory_data_rx_busy  : logic;
    var memory_data_rx_finish: logic;
    var memory_data_rx_enable: logic = if debug_tx_en && addr_high_tx_finish {
        1
    } else {
        0
    };
    inst memory_addr_tx: uarty::Rx (
        CLK                            ,
        RST                            ,
        DATA_IN : GPIO_0_1             ,
        RE      : memory_data_rx_enable,
        data_out: memory_data          ,
        busy    : memory_data_rx_busy  ,
        finish  : memory_data_rx_finish,
    );

    var write_busy: logic = callback_tx_busy || memory_data_rx_busy;
    assign GPIO_0_0   = if mode == ModePkg::CpuMode::callback {
        callback_tx_out
    } else if mode == ModePkg::CpuMode::debug {
        if addr_low_tx_enable {
            addr_low_tx_out
        } else if addr_high_tx_enable {
            addr_high_tx_out
        } else {
            1
        }
    } else {
        1
    };
}
