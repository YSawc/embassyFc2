module OpeSplitter (
    CLK            : input  logic                ,
    RST            : input  logic                ,
    EN             : input  logic                ,
    ope_kind       : input  OperatorsPkg::OpeKind,
    store_memory_en: output logic                ,
    busy           : output logic                ,
    finish         : output logic                ,
) {
    enum Status: logic {
        idle,
        work,
    }
    var status           : Status;
    var n_status         : Status;
    var n_store_memory_en: logic ;
    var n_busy           : logic ;
    var n_finish         : logic ;
    always_comb {
        n_status          = status;
        n_busy            = busy;
        n_finish          = finish;
        n_store_memory_en = store_memory_en;
        case status {
            Status::idle: {
                if EN {
                    n_busy   = 1;
                    n_status = Status::work;
                } else {
                    n_finish = 0;
                }
            }
            Status::work: {
                n_status = Status::idle;
                n_busy   = 0;
                n_finish = 1;
                if ope_kind == OperatorsPkg::OpeKind::Sta || ope_kind == OperatorsPkg::OpeKind::Stx || ope_kind == OperatorsPkg::OpeKind::Sty {
                    n_store_memory_en = 1;
                } else {
                    n_store_memory_en = 0;
                }
            }
        }
    }

    always_ff (posedge CLK, async_high RST) {
        if_reset {
            status          = Status::idle;
            finish          = 0;
            busy            = 0;
            store_memory_en = 0;
        } else {
            status          = n_status;
            finish          = n_finish;
            busy            = n_busy;
            store_memory_en = n_store_memory_en;
        }
    }
}
