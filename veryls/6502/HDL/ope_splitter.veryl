module OpeSplitter (
    i_clk     : input  logic                ,
    i_rst     : input  logic                ,
    i_en      : input  logic                ,
    i_ope_kind: input  OperatorsPkg::OpeKind,
    o_ope_mode: output ModePkg::OpeMode     ,
    o_busy    : output logic                ,
    o_finish  : output logic                ,
) {
    enum Status: logic<2> {
        Idle,
        Work,
        Finish,
    }
    var status         : Status          ;
    var status_next    : Status          ;
    var o_ope_mode_next: ModePkg::OpeMode;
    var o_busy_next    : logic           ;
    var o_finish_next  : logic           ;
    always_comb {
        status_next     = status;
        o_finish_next   = o_finish;
        o_busy_next     = o_busy;
        o_ope_mode_next = o_ope_mode;
        case status {
            Status::Idle: {
                if i_en {
                    o_busy_next = 1;
                    status_next = Status::Work;
                }
            }
            Status::Work: {
                status_next = Status::Finish;
                o_busy_next = 0;
                if i_ope_kind == OperatorsPkg::OpeKind::Cmp || i_ope_kind == OperatorsPkg::OpeKind::Cpx || i_ope_kind == OperatorsPkg::OpeKind::Cpy {
                    o_ope_mode_next = ModePkg::OpeMode::Compare;
                } else if i_ope_kind == OperatorsPkg::OpeKind::Brk || i_ope_kind == OperatorsPkg::OpeKind::Inc || i_ope_kind == OperatorsPkg::OpeKind::Dec {
                    o_ope_mode_next = ModePkg::OpeMode::ReadAndStoreToMemory;
                } else if i_ope_kind == OperatorsPkg::OpeKind::Ora || i_ope_kind == OperatorsPkg::OpeKind::And || i_ope_kind == OperatorsPkg::OpeKind::Rti || i_ope_kind == OperatorsPkg::OpeKind::Rts || i_ope_kind == OperatorsPkg::OpeKind::Eor || i_ope_kind == OperatorsPkg::OpeKind::Adc || i_ope_kind == OperatorsPkg::OpeKind::Sbc || i_ope_kind == OperatorsPkg::OpeKind::Lda || i_ope_kind == OperatorsPkg::OpeKind::Ldx || i_ope_kind == OperatorsPkg::OpeKind::Ldy || i_ope_kind == OperatorsPkg::OpeKind::Plp || i_ope_kind == OperatorsPkg::OpeKind::Pla || i_ope_kind == OperatorsPkg::OpeKind::Bit {
                    o_ope_mode_next = ModePkg::OpeMode::ReadAndStoreToRegister;
                } else if i_ope_kind == OperatorsPkg::OpeKind::Asl || i_ope_kind == OperatorsPkg::OpeKind::Rol || i_ope_kind == OperatorsPkg::OpeKind::Lsr || i_ope_kind == OperatorsPkg::OpeKind::Ror {
                    o_ope_mode_next = ModePkg::OpeMode::ReadAndStoreToAccOrMemory;
                } else if i_ope_kind == OperatorsPkg::OpeKind::Jsr || i_ope_kind == OperatorsPkg::OpeKind::Sta || i_ope_kind == OperatorsPkg::OpeKind::Stx || i_ope_kind == OperatorsPkg::OpeKind::Sty || i_ope_kind == OperatorsPkg::OpeKind::Pha || i_ope_kind == OperatorsPkg::OpeKind::Php {
                    o_ope_mode_next = ModePkg::OpeMode::StoreToMemory;
                } else if i_ope_kind == OperatorsPkg::OpeKind::Nop {
                    o_finish_next = status_next == Status::Finish;
                } else {
                    o_ope_mode_next = ModePkg::OpeMode::Other;
                }
            }
            Status::Finish: {
                status_next = Status::Idle;
            }
        }
        o_finish_next = status_next == Status::Finish;
    }

    always_ff (posedge i_clk, async_high i_rst) {
        if_reset {
            status     = Status::Idle;
            o_finish   = 0;
            o_busy     = 0;
            o_ope_mode = ModePkg::OpeMode::Nop;
        } else {
            status     = status_next;
            o_finish   = o_finish_next;
            o_busy     = o_busy_next;
            o_ope_mode = o_ope_mode_next;
        }
    }
}
